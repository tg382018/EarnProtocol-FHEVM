/* tslint:disable */
/* eslint-disable */
export function shortint_pke_params_name(param: ShortintCompactPublicKeyEncryptionParametersName): string;
export function shortint_params_name(param: ShortintParametersName): string;
export function init_panic_hook(): void;
export function set_server_key(server_key: TfheServerKey): void;
export enum BooleanEncryptionKeyChoice {
  Big = 0,
  Small = 1,
}
export enum BooleanParameterSet {
  Default = 0,
  TfheLib = 1,
  DefaultKsPbs = 2,
  TfheLibKsPbs = 3,
}
export enum FheTypes {
  Bool = 0,
  Uint4 = 1,
  Uint8 = 2,
  Uint16 = 3,
  Uint32 = 4,
  Uint64 = 5,
  Uint128 = 6,
  Uint160 = 7,
  Uint256 = 8,
  Uint512 = 9,
  Uint1024 = 10,
  Uint2048 = 11,
  Uint2 = 12,
  Uint6 = 13,
  Uint10 = 14,
  Uint12 = 15,
  Uint14 = 16,
  Int2 = 17,
  Int4 = 18,
  Int6 = 19,
  Int8 = 20,
  Int10 = 21,
  Int12 = 22,
  Int14 = 23,
  Int16 = 24,
  Int32 = 25,
  Int64 = 26,
  Int128 = 27,
  Int160 = 28,
  Int256 = 29,
  AsciiString = 30,
  Int512 = 31,
  Int1024 = 32,
  Int2048 = 33,
  Uint24 = 34,
  Uint40 = 35,
  Uint48 = 36,
  Uint56 = 37,
  Uint72 = 38,
  Uint80 = 39,
  Uint88 = 40,
  Uint96 = 41,
  Uint104 = 42,
  Uint112 = 43,
  Uint120 = 44,
  Uint136 = 45,
  Uint144 = 46,
  Uint152 = 47,
  Uint168 = 48,
  Uint176 = 49,
  Uint184 = 50,
  Uint192 = 51,
  Uint200 = 52,
  Uint208 = 53,
  Uint216 = 54,
  Uint224 = 55,
  Uint232 = 56,
  Uint240 = 57,
  Uint248 = 58,
  Int24 = 59,
  Int40 = 60,
  Int48 = 61,
  Int56 = 62,
  Int72 = 63,
  Int80 = 64,
  Int88 = 65,
  Int96 = 66,
  Int104 = 67,
  Int112 = 68,
  Int120 = 69,
  Int136 = 70,
  Int144 = 71,
  Int152 = 72,
  Int168 = 73,
  Int176 = 74,
  Int184 = 75,
  Int192 = 76,
  Int200 = 77,
  Int208 = 78,
  Int216 = 79,
  Int224 = 80,
  Int232 = 81,
  Int240 = 82,
  Int248 = 83,
}
export enum ShortintCompactPublicKeyEncryptionParametersName {
  PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128 = 0,
  V1_1_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128 = 1,
  V1_1_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128_ZKV1 = 2,
  V1_0_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128 = 3,
  V1_0_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128_ZKV1 = 4,
  V0_11_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M64 = 5,
  V0_11_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M64_ZKV1 = 6,
  V1_2_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128 = 7,
  V1_2_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128_ZKV1 = 8,
  V1_3_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128 = 9,
  V1_3_PARAM_PKE_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128_ZKV1 = 10,
}
export enum ShortintEncryptionKeyChoice {
  Big = 0,
  Small = 1,
}
export enum ShortintPBSOrder {
  KeyswitchBootstrap = 0,
  BootstrapKeyswitch = 1,
}
export enum ShortintParametersName {
  PARAM_MESSAGE_2_CARRY_2_KS_PBS_TUNIFORM_2M128 = 0,
  V1_1_PARAM_MESSAGE_1_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 1,
  V1_1_PARAM_MESSAGE_1_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 2,
  V1_1_PARAM_MESSAGE_2_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 3,
  V1_1_PARAM_MESSAGE_1_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 4,
  V1_1_PARAM_MESSAGE_2_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 5,
  V1_1_PARAM_MESSAGE_3_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 6,
  V1_1_PARAM_MESSAGE_1_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 7,
  V1_1_PARAM_MESSAGE_2_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 8,
  V1_1_PARAM_MESSAGE_3_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 9,
  V1_1_PARAM_MESSAGE_4_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 10,
  V1_1_PARAM_MESSAGE_1_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 11,
  V1_1_PARAM_MESSAGE_2_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 12,
  V1_1_PARAM_MESSAGE_3_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 13,
  V1_1_PARAM_MESSAGE_4_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 14,
  V1_1_PARAM_MESSAGE_5_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 15,
  V1_1_PARAM_MESSAGE_1_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 16,
  V1_1_PARAM_MESSAGE_2_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 17,
  V1_1_PARAM_MESSAGE_3_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 18,
  V1_1_PARAM_MESSAGE_4_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 19,
  V1_1_PARAM_MESSAGE_5_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 20,
  V1_1_PARAM_MESSAGE_6_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 21,
  V1_1_PARAM_MESSAGE_1_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 22,
  V1_1_PARAM_MESSAGE_2_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 23,
  V1_1_PARAM_MESSAGE_3_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 24,
  V1_1_PARAM_MESSAGE_4_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 25,
  V1_1_PARAM_MESSAGE_5_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 26,
  V1_1_PARAM_MESSAGE_6_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 27,
  V1_1_PARAM_MESSAGE_7_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 28,
  V1_1_PARAM_MESSAGE_1_CARRY_7_KS_PBS_GAUSSIAN_2M128 = 29,
  V1_1_PARAM_MESSAGE_2_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 30,
  V1_1_PARAM_MESSAGE_3_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 31,
  V1_1_PARAM_MESSAGE_4_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 32,
  V1_1_PARAM_MESSAGE_5_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 33,
  V1_1_PARAM_MESSAGE_6_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 34,
  V1_1_PARAM_MESSAGE_7_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 35,
  V1_1_PARAM_MESSAGE_8_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 36,
  V1_1_PARAM_MESSAGE_1_CARRY_1_PBS_KS_GAUSSIAN_2M128 = 37,
  V1_1_PARAM_MESSAGE_2_CARRY_2_PBS_KS_GAUSSIAN_2M128 = 38,
  V1_1_PARAM_MESSAGE_3_CARRY_3_PBS_KS_GAUSSIAN_2M128 = 39,
  V1_1_PARAM_MESSAGE_4_CARRY_4_PBS_KS_GAUSSIAN_2M128 = 40,
  V1_1_PARAM_MESSAGE_1_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 41,
  V1_1_PARAM_MESSAGE_1_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 42,
  V1_1_PARAM_MESSAGE_1_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 43,
  V1_1_PARAM_MESSAGE_1_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 44,
  V1_1_PARAM_MESSAGE_1_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 45,
  V1_1_PARAM_MESSAGE_1_CARRY_7_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 46,
  V1_1_PARAM_MESSAGE_2_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 47,
  V1_1_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 48,
  V1_1_PARAM_MESSAGE_2_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 49,
  V1_1_PARAM_MESSAGE_2_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 50,
  V1_1_PARAM_MESSAGE_2_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 51,
  V1_1_PARAM_MESSAGE_2_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 52,
  V1_1_PARAM_MESSAGE_3_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 53,
  V1_1_PARAM_MESSAGE_3_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 54,
  V1_1_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 55,
  V1_1_PARAM_MESSAGE_3_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 56,
  V1_1_PARAM_MESSAGE_3_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 57,
  V1_1_PARAM_MESSAGE_4_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 58,
  V1_1_PARAM_MESSAGE_4_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 59,
  V1_1_PARAM_MESSAGE_4_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 60,
  V1_1_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 61,
  V1_1_PARAM_MESSAGE_5_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 62,
  V1_1_PARAM_MESSAGE_5_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 63,
  V1_1_PARAM_MESSAGE_5_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 64,
  V1_1_PARAM_MESSAGE_6_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 65,
  V1_1_PARAM_MESSAGE_6_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 66,
  V1_1_PARAM_MESSAGE_7_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 67,
  V1_1_PARAM_MESSAGE_1_CARRY_1_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 68,
  V1_1_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 69,
  V1_1_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 70,
  V1_1_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 71,
  V1_0_PARAM_MESSAGE_1_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 72,
  V1_0_PARAM_MESSAGE_1_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 73,
  V1_0_PARAM_MESSAGE_2_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 74,
  V1_0_PARAM_MESSAGE_1_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 75,
  V1_0_PARAM_MESSAGE_2_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 76,
  V1_0_PARAM_MESSAGE_3_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 77,
  V1_0_PARAM_MESSAGE_1_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 78,
  V1_0_PARAM_MESSAGE_2_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 79,
  V1_0_PARAM_MESSAGE_3_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 80,
  V1_0_PARAM_MESSAGE_4_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 81,
  V1_0_PARAM_MESSAGE_1_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 82,
  V1_0_PARAM_MESSAGE_2_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 83,
  V1_0_PARAM_MESSAGE_3_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 84,
  V1_0_PARAM_MESSAGE_4_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 85,
  V1_0_PARAM_MESSAGE_5_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 86,
  V1_0_PARAM_MESSAGE_1_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 87,
  V1_0_PARAM_MESSAGE_2_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 88,
  V1_0_PARAM_MESSAGE_3_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 89,
  V1_0_PARAM_MESSAGE_4_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 90,
  V1_0_PARAM_MESSAGE_5_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 91,
  V1_0_PARAM_MESSAGE_6_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 92,
  V1_0_PARAM_MESSAGE_1_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 93,
  V1_0_PARAM_MESSAGE_2_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 94,
  V1_0_PARAM_MESSAGE_3_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 95,
  V1_0_PARAM_MESSAGE_4_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 96,
  V1_0_PARAM_MESSAGE_5_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 97,
  V1_0_PARAM_MESSAGE_6_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 98,
  V1_0_PARAM_MESSAGE_7_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 99,
  V1_0_PARAM_MESSAGE_1_CARRY_7_KS_PBS_GAUSSIAN_2M128 = 100,
  V1_0_PARAM_MESSAGE_2_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 101,
  V1_0_PARAM_MESSAGE_3_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 102,
  V1_0_PARAM_MESSAGE_4_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 103,
  V1_0_PARAM_MESSAGE_5_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 104,
  V1_0_PARAM_MESSAGE_6_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 105,
  V1_0_PARAM_MESSAGE_7_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 106,
  V1_0_PARAM_MESSAGE_8_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 107,
  V1_0_PARAM_MESSAGE_1_CARRY_1_PBS_KS_GAUSSIAN_2M128 = 108,
  V1_0_PARAM_MESSAGE_2_CARRY_2_PBS_KS_GAUSSIAN_2M128 = 109,
  V1_0_PARAM_MESSAGE_3_CARRY_3_PBS_KS_GAUSSIAN_2M128 = 110,
  V1_0_PARAM_MESSAGE_4_CARRY_4_PBS_KS_GAUSSIAN_2M128 = 111,
  V1_0_PARAM_MESSAGE_1_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 112,
  V1_0_PARAM_MESSAGE_1_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 113,
  V1_0_PARAM_MESSAGE_1_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 114,
  V1_0_PARAM_MESSAGE_1_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 115,
  V1_0_PARAM_MESSAGE_1_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 116,
  V1_0_PARAM_MESSAGE_1_CARRY_7_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 117,
  V1_0_PARAM_MESSAGE_2_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 118,
  V1_0_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 119,
  V1_0_PARAM_MESSAGE_2_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 120,
  V1_0_PARAM_MESSAGE_2_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 121,
  V1_0_PARAM_MESSAGE_2_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 122,
  V1_0_PARAM_MESSAGE_2_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 123,
  V1_0_PARAM_MESSAGE_3_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 124,
  V1_0_PARAM_MESSAGE_3_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 125,
  V1_0_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 126,
  V1_0_PARAM_MESSAGE_3_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 127,
  V1_0_PARAM_MESSAGE_3_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 128,
  V1_0_PARAM_MESSAGE_4_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 129,
  V1_0_PARAM_MESSAGE_4_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 130,
  V1_0_PARAM_MESSAGE_4_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 131,
  V1_0_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 132,
  V1_0_PARAM_MESSAGE_5_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 133,
  V1_0_PARAM_MESSAGE_5_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 134,
  V1_0_PARAM_MESSAGE_5_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 135,
  V1_0_PARAM_MESSAGE_6_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 136,
  V1_0_PARAM_MESSAGE_6_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 137,
  V1_0_PARAM_MESSAGE_7_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 138,
  V1_0_PARAM_MESSAGE_1_CARRY_1_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 139,
  V1_0_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 140,
  V1_0_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 141,
  V1_0_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 142,
  V0_11_PARAM_MESSAGE_1_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 143,
  V0_11_PARAM_MESSAGE_1_CARRY_1_KS_PBS_GAUSSIAN_2M64 = 144,
  V0_11_PARAM_MESSAGE_2_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 145,
  V0_11_PARAM_MESSAGE_1_CARRY_2_KS_PBS_GAUSSIAN_2M64 = 146,
  V0_11_PARAM_MESSAGE_2_CARRY_1_KS_PBS_GAUSSIAN_2M64 = 147,
  V0_11_PARAM_MESSAGE_3_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 148,
  V0_11_PARAM_MESSAGE_1_CARRY_3_KS_PBS_GAUSSIAN_2M64 = 149,
  V0_11_PARAM_MESSAGE_2_CARRY_2_KS_PBS_GAUSSIAN_2M64 = 150,
  V0_11_PARAM_MESSAGE_3_CARRY_1_KS_PBS_GAUSSIAN_2M64 = 151,
  V0_11_PARAM_MESSAGE_4_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 152,
  V0_11_PARAM_MESSAGE_1_CARRY_4_KS_PBS_GAUSSIAN_2M64 = 153,
  V0_11_PARAM_MESSAGE_2_CARRY_3_KS_PBS_GAUSSIAN_2M64 = 154,
  V0_11_PARAM_MESSAGE_3_CARRY_2_KS_PBS_GAUSSIAN_2M64 = 155,
  V0_11_PARAM_MESSAGE_4_CARRY_1_KS_PBS_GAUSSIAN_2M64 = 156,
  V0_11_PARAM_MESSAGE_5_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 157,
  V0_11_PARAM_MESSAGE_1_CARRY_5_KS_PBS_GAUSSIAN_2M64 = 158,
  V0_11_PARAM_MESSAGE_2_CARRY_4_KS_PBS_GAUSSIAN_2M64 = 159,
  V0_11_PARAM_MESSAGE_3_CARRY_3_KS_PBS_GAUSSIAN_2M64 = 160,
  V0_11_PARAM_MESSAGE_4_CARRY_2_KS_PBS_GAUSSIAN_2M64 = 161,
  V0_11_PARAM_MESSAGE_5_CARRY_1_KS_PBS_GAUSSIAN_2M64 = 162,
  V0_11_PARAM_MESSAGE_6_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 163,
  V0_11_PARAM_MESSAGE_1_CARRY_6_KS_PBS_GAUSSIAN_2M64 = 164,
  V0_11_PARAM_MESSAGE_2_CARRY_5_KS_PBS_GAUSSIAN_2M64 = 165,
  V0_11_PARAM_MESSAGE_3_CARRY_4_KS_PBS_GAUSSIAN_2M64 = 166,
  V0_11_PARAM_MESSAGE_4_CARRY_3_KS_PBS_GAUSSIAN_2M64 = 167,
  V0_11_PARAM_MESSAGE_5_CARRY_2_KS_PBS_GAUSSIAN_2M64 = 168,
  V0_11_PARAM_MESSAGE_6_CARRY_1_KS_PBS_GAUSSIAN_2M64 = 169,
  V0_11_PARAM_MESSAGE_7_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 170,
  V0_11_PARAM_MESSAGE_1_CARRY_7_KS_PBS_GAUSSIAN_2M64 = 171,
  V0_11_PARAM_MESSAGE_2_CARRY_6_KS_PBS_GAUSSIAN_2M64 = 172,
  V0_11_PARAM_MESSAGE_3_CARRY_5_KS_PBS_GAUSSIAN_2M64 = 173,
  V0_11_PARAM_MESSAGE_4_CARRY_4_KS_PBS_GAUSSIAN_2M64 = 174,
  V0_11_PARAM_MESSAGE_5_CARRY_3_KS_PBS_GAUSSIAN_2M64 = 175,
  V0_11_PARAM_MESSAGE_6_CARRY_2_KS_PBS_GAUSSIAN_2M64 = 176,
  V0_11_PARAM_MESSAGE_7_CARRY_1_KS_PBS_GAUSSIAN_2M64 = 177,
  V0_11_PARAM_MESSAGE_8_CARRY_0_KS_PBS_GAUSSIAN_2M64 = 178,
  V0_11_PARAM_MESSAGE_1_CARRY_1_PBS_KS_GAUSSIAN_2M64 = 179,
  V0_11_PARAM_MESSAGE_2_CARRY_2_PBS_KS_GAUSSIAN_2M64 = 180,
  V0_11_PARAM_MESSAGE_3_CARRY_3_PBS_KS_GAUSSIAN_2M64 = 181,
  V0_11_PARAM_MESSAGE_4_CARRY_4_PBS_KS_GAUSSIAN_2M64 = 182,
  V0_11_PARAM_MESSAGE_1_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 183,
  V0_11_PARAM_MESSAGE_1_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 184,
  V0_11_PARAM_MESSAGE_1_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 185,
  V0_11_PARAM_MESSAGE_1_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 186,
  V0_11_PARAM_MESSAGE_1_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 187,
  V0_11_PARAM_MESSAGE_1_CARRY_7_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 188,
  V0_11_PARAM_MESSAGE_2_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 189,
  V0_11_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 190,
  V0_11_PARAM_MESSAGE_2_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 191,
  V0_11_PARAM_MESSAGE_2_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 192,
  V0_11_PARAM_MESSAGE_2_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 193,
  V0_11_PARAM_MESSAGE_2_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 194,
  V0_11_PARAM_MESSAGE_3_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 195,
  V0_11_PARAM_MESSAGE_3_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 196,
  V0_11_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 197,
  V0_11_PARAM_MESSAGE_3_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 198,
  V0_11_PARAM_MESSAGE_3_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 199,
  V0_11_PARAM_MESSAGE_4_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 200,
  V0_11_PARAM_MESSAGE_4_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 201,
  V0_11_PARAM_MESSAGE_4_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 202,
  V0_11_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 203,
  V0_11_PARAM_MESSAGE_5_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 204,
  V0_11_PARAM_MESSAGE_5_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 205,
  V0_11_PARAM_MESSAGE_5_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 206,
  V0_11_PARAM_MESSAGE_6_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 207,
  V0_11_PARAM_MESSAGE_6_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 208,
  V0_11_PARAM_MESSAGE_7_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M64 = 209,
  V0_11_PARAM_MESSAGE_1_CARRY_1_COMPACT_PK_PBS_KS_GAUSSIAN_2M64 = 210,
  V0_11_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_PBS_KS_GAUSSIAN_2M64 = 211,
  V0_11_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_PBS_KS_GAUSSIAN_2M64 = 212,
  V0_11_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_PBS_KS_GAUSSIAN_2M64 = 213,
  V1_2_PARAM_MESSAGE_1_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 214,
  V1_2_PARAM_MESSAGE_1_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 215,
  V1_2_PARAM_MESSAGE_2_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 216,
  V1_2_PARAM_MESSAGE_1_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 217,
  V1_2_PARAM_MESSAGE_2_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 218,
  V1_2_PARAM_MESSAGE_3_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 219,
  V1_2_PARAM_MESSAGE_1_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 220,
  V1_2_PARAM_MESSAGE_2_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 221,
  V1_2_PARAM_MESSAGE_3_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 222,
  V1_2_PARAM_MESSAGE_4_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 223,
  V1_2_PARAM_MESSAGE_1_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 224,
  V1_2_PARAM_MESSAGE_2_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 225,
  V1_2_PARAM_MESSAGE_3_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 226,
  V1_2_PARAM_MESSAGE_4_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 227,
  V1_2_PARAM_MESSAGE_5_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 228,
  V1_2_PARAM_MESSAGE_1_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 229,
  V1_2_PARAM_MESSAGE_2_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 230,
  V1_2_PARAM_MESSAGE_3_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 231,
  V1_2_PARAM_MESSAGE_4_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 232,
  V1_2_PARAM_MESSAGE_5_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 233,
  V1_2_PARAM_MESSAGE_6_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 234,
  V1_2_PARAM_MESSAGE_1_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 235,
  V1_2_PARAM_MESSAGE_2_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 236,
  V1_2_PARAM_MESSAGE_3_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 237,
  V1_2_PARAM_MESSAGE_4_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 238,
  V1_2_PARAM_MESSAGE_5_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 239,
  V1_2_PARAM_MESSAGE_6_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 240,
  V1_2_PARAM_MESSAGE_7_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 241,
  V1_2_PARAM_MESSAGE_1_CARRY_7_KS_PBS_GAUSSIAN_2M128 = 242,
  V1_2_PARAM_MESSAGE_2_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 243,
  V1_2_PARAM_MESSAGE_3_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 244,
  V1_2_PARAM_MESSAGE_4_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 245,
  V1_2_PARAM_MESSAGE_5_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 246,
  V1_2_PARAM_MESSAGE_6_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 247,
  V1_2_PARAM_MESSAGE_7_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 248,
  V1_2_PARAM_MESSAGE_8_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 249,
  V1_2_PARAM_MESSAGE_1_CARRY_1_PBS_KS_GAUSSIAN_2M128 = 250,
  V1_2_PARAM_MESSAGE_2_CARRY_2_PBS_KS_GAUSSIAN_2M128 = 251,
  V1_2_PARAM_MESSAGE_3_CARRY_3_PBS_KS_GAUSSIAN_2M128 = 252,
  V1_2_PARAM_MESSAGE_4_CARRY_4_PBS_KS_GAUSSIAN_2M128 = 253,
  V1_2_PARAM_MESSAGE_1_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 254,
  V1_2_PARAM_MESSAGE_1_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 255,
  V1_2_PARAM_MESSAGE_1_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 256,
  V1_2_PARAM_MESSAGE_1_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 257,
  V1_2_PARAM_MESSAGE_1_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 258,
  V1_2_PARAM_MESSAGE_1_CARRY_7_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 259,
  V1_2_PARAM_MESSAGE_2_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 260,
  V1_2_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 261,
  V1_2_PARAM_MESSAGE_2_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 262,
  V1_2_PARAM_MESSAGE_2_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 263,
  V1_2_PARAM_MESSAGE_2_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 264,
  V1_2_PARAM_MESSAGE_2_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 265,
  V1_2_PARAM_MESSAGE_3_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 266,
  V1_2_PARAM_MESSAGE_3_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 267,
  V1_2_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 268,
  V1_2_PARAM_MESSAGE_3_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 269,
  V1_2_PARAM_MESSAGE_3_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 270,
  V1_2_PARAM_MESSAGE_4_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 271,
  V1_2_PARAM_MESSAGE_4_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 272,
  V1_2_PARAM_MESSAGE_4_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 273,
  V1_2_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 274,
  V1_2_PARAM_MESSAGE_5_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 275,
  V1_2_PARAM_MESSAGE_5_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 276,
  V1_2_PARAM_MESSAGE_5_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 277,
  V1_2_PARAM_MESSAGE_6_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 278,
  V1_2_PARAM_MESSAGE_6_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 279,
  V1_2_PARAM_MESSAGE_7_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 280,
  V1_2_PARAM_MESSAGE_1_CARRY_1_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 281,
  V1_2_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 282,
  V1_2_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 283,
  V1_2_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 284,
  V1_3_PARAM_MESSAGE_1_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 285,
  V1_3_PARAM_MESSAGE_1_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 286,
  V1_3_PARAM_MESSAGE_2_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 287,
  V1_3_PARAM_MESSAGE_1_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 288,
  V1_3_PARAM_MESSAGE_2_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 289,
  V1_3_PARAM_MESSAGE_3_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 290,
  V1_3_PARAM_MESSAGE_1_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 291,
  V1_3_PARAM_MESSAGE_2_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 292,
  V1_3_PARAM_MESSAGE_3_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 293,
  V1_3_PARAM_MESSAGE_4_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 294,
  V1_3_PARAM_MESSAGE_1_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 295,
  V1_3_PARAM_MESSAGE_2_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 296,
  V1_3_PARAM_MESSAGE_3_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 297,
  V1_3_PARAM_MESSAGE_4_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 298,
  V1_3_PARAM_MESSAGE_5_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 299,
  V1_3_PARAM_MESSAGE_1_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 300,
  V1_3_PARAM_MESSAGE_2_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 301,
  V1_3_PARAM_MESSAGE_3_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 302,
  V1_3_PARAM_MESSAGE_4_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 303,
  V1_3_PARAM_MESSAGE_5_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 304,
  V1_3_PARAM_MESSAGE_6_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 305,
  V1_3_PARAM_MESSAGE_1_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 306,
  V1_3_PARAM_MESSAGE_2_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 307,
  V1_3_PARAM_MESSAGE_3_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 308,
  V1_3_PARAM_MESSAGE_4_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 309,
  V1_3_PARAM_MESSAGE_5_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 310,
  V1_3_PARAM_MESSAGE_6_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 311,
  V1_3_PARAM_MESSAGE_7_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 312,
  V1_3_PARAM_MESSAGE_1_CARRY_7_KS_PBS_GAUSSIAN_2M128 = 313,
  V1_3_PARAM_MESSAGE_2_CARRY_6_KS_PBS_GAUSSIAN_2M128 = 314,
  V1_3_PARAM_MESSAGE_3_CARRY_5_KS_PBS_GAUSSIAN_2M128 = 315,
  V1_3_PARAM_MESSAGE_4_CARRY_4_KS_PBS_GAUSSIAN_2M128 = 316,
  V1_3_PARAM_MESSAGE_5_CARRY_3_KS_PBS_GAUSSIAN_2M128 = 317,
  V1_3_PARAM_MESSAGE_6_CARRY_2_KS_PBS_GAUSSIAN_2M128 = 318,
  V1_3_PARAM_MESSAGE_7_CARRY_1_KS_PBS_GAUSSIAN_2M128 = 319,
  V1_3_PARAM_MESSAGE_8_CARRY_0_KS_PBS_GAUSSIAN_2M128 = 320,
  V1_3_PARAM_MESSAGE_1_CARRY_1_PBS_KS_GAUSSIAN_2M128 = 321,
  V1_3_PARAM_MESSAGE_2_CARRY_2_PBS_KS_GAUSSIAN_2M128 = 322,
  V1_3_PARAM_MESSAGE_3_CARRY_3_PBS_KS_GAUSSIAN_2M128 = 323,
  V1_3_PARAM_MESSAGE_4_CARRY_4_PBS_KS_GAUSSIAN_2M128 = 324,
  V1_3_PARAM_MESSAGE_1_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 325,
  V1_3_PARAM_MESSAGE_1_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 326,
  V1_3_PARAM_MESSAGE_1_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 327,
  V1_3_PARAM_MESSAGE_1_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 328,
  V1_3_PARAM_MESSAGE_1_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 329,
  V1_3_PARAM_MESSAGE_1_CARRY_7_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 330,
  V1_3_PARAM_MESSAGE_2_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 331,
  V1_3_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 332,
  V1_3_PARAM_MESSAGE_2_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 333,
  V1_3_PARAM_MESSAGE_2_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 334,
  V1_3_PARAM_MESSAGE_2_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 335,
  V1_3_PARAM_MESSAGE_2_CARRY_6_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 336,
  V1_3_PARAM_MESSAGE_3_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 337,
  V1_3_PARAM_MESSAGE_3_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 338,
  V1_3_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 339,
  V1_3_PARAM_MESSAGE_3_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 340,
  V1_3_PARAM_MESSAGE_3_CARRY_5_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 341,
  V1_3_PARAM_MESSAGE_4_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 342,
  V1_3_PARAM_MESSAGE_4_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 343,
  V1_3_PARAM_MESSAGE_4_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 344,
  V1_3_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 345,
  V1_3_PARAM_MESSAGE_5_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 346,
  V1_3_PARAM_MESSAGE_5_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 347,
  V1_3_PARAM_MESSAGE_5_CARRY_3_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 348,
  V1_3_PARAM_MESSAGE_6_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 349,
  V1_3_PARAM_MESSAGE_6_CARRY_2_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 350,
  V1_3_PARAM_MESSAGE_7_CARRY_1_COMPACT_PK_KS_PBS_GAUSSIAN_2M128 = 351,
  V1_3_PARAM_MESSAGE_1_CARRY_1_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 352,
  V1_3_PARAM_MESSAGE_2_CARRY_2_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 353,
  V1_3_PARAM_MESSAGE_3_CARRY_3_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 354,
  V1_3_PARAM_MESSAGE_4_CARRY_4_COMPACT_PK_PBS_KS_GAUSSIAN_2M128 = 355,
}
export enum ZkComputeLoad {
  Proof = 0,
  Verify = 1,
}
export class Boolean {
  private constructor();
  free(): void;
  static get_parameters(parameter_choice: number): BooleanParameters;
  static new_gaussian_from_std_dev(std_dev: number): BooleanNoiseDistribution;
  static try_new_t_uniform(bound_log2: number): BooleanNoiseDistribution;
  static new_parameters(lwe_dimension: number, glwe_dimension: number, polynomial_size: number, lwe_noise_distribution: BooleanNoiseDistribution, glwe_noise_distribution: BooleanNoiseDistribution, pbs_base_log: number, pbs_level: number, ks_base_log: number, ks_level: number, encryption_key_choice: BooleanEncryptionKeyChoice): BooleanParameters;
  static new_client_key_from_seed_and_parameters(seed_high_bytes: bigint, seed_low_bytes: bigint, parameters: BooleanParameters): BooleanClientKey;
  static new_client_key(parameters: BooleanParameters): BooleanClientKey;
  static new_public_key(client_key: BooleanClientKey): BooleanPublicKey;
  static new_compressed_server_key(client_key: BooleanClientKey): BooleanCompressedServerKey;
  static encrypt(client_key: BooleanClientKey, message: boolean): BooleanCiphertext;
  static encrypt_compressed(client_key: BooleanClientKey, message: boolean): BooleanCompressedCiphertext;
  static decompress_ciphertext(compressed_ciphertext: BooleanCompressedCiphertext): BooleanCiphertext;
  static encrypt_with_public_key(public_key: BooleanPublicKey, message: boolean): BooleanCiphertext;
  static trivial_encrypt(message: boolean): BooleanCiphertext;
  static decrypt(client_key: BooleanClientKey, ct: BooleanCiphertext): boolean;
  static serialize_ciphertext(ciphertext: BooleanCiphertext): Uint8Array;
  static deserialize_ciphertext(buffer: Uint8Array): BooleanCiphertext;
  static serialize_compressed_ciphertext(ciphertext: BooleanCompressedCiphertext): Uint8Array;
  static deserialize_compressed_ciphertext(buffer: Uint8Array): BooleanCompressedCiphertext;
  static serialize_client_key(client_key: BooleanClientKey): Uint8Array;
  static deserialize_client_key(buffer: Uint8Array): BooleanClientKey;
  static serialize_public_key(public_key: BooleanPublicKey): Uint8Array;
  static deserialize_public_key(buffer: Uint8Array): BooleanPublicKey;
  static serialize_compressed_server_key(server_key: BooleanCompressedServerKey): Uint8Array;
  static deserialize_compressed_server_key(buffer: Uint8Array): BooleanCompressedServerKey;
}
export class BooleanCiphertext {
  private constructor();
  free(): void;
}
export class BooleanClientKey {
  private constructor();
  free(): void;
}
export class BooleanCompressedCiphertext {
  private constructor();
  free(): void;
}
export class BooleanCompressedServerKey {
  private constructor();
  free(): void;
}
export class BooleanNoiseDistribution {
  private constructor();
  free(): void;
}
export class BooleanParameters {
  private constructor();
  free(): void;
}
export class BooleanPublicKey {
  private constructor();
  free(): void;
}
export class CompactCiphertextList {
  private constructor();
  free(): void;
  static builder(public_key: TfheCompactPublicKey): CompactCiphertextListBuilder;
  len(): number;
  is_empty(): boolean;
  get_kind_of(index: number): FheTypes | undefined;
  expand(): CompactCiphertextListExpander;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompactCiphertextList;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompactCiphertextList;
}
export class CompactCiphertextListBuilder {
  private constructor();
  free(): void;
  push_u24(value: number): void;
  push_u40(value: bigint): void;
  push_u48(value: bigint): void;
  push_u56(value: bigint): void;
  push_u2(value: number): void;
  push_u4(value: number): void;
  push_u6(value: number): void;
  push_u8(value: number): void;
  push_u10(value: number): void;
  push_u12(value: number): void;
  push_u14(value: number): void;
  push_u16(value: number): void;
  push_u32(value: number): void;
  push_u64(value: bigint): void;
  push_i24(value: number): void;
  push_i40(value: bigint): void;
  push_i48(value: bigint): void;
  push_i56(value: bigint): void;
  push_i2(value: number): void;
  push_i4(value: number): void;
  push_i6(value: number): void;
  push_i8(value: number): void;
  push_i10(value: number): void;
  push_i12(value: number): void;
  push_i14(value: number): void;
  push_i16(value: number): void;
  push_i32(value: number): void;
  push_i64(value: bigint): void;
  push_u128(value: any): void;
  push_u160(value: any): void;
  push_u256(value: any): void;
  push_u512(value: any): void;
  push_u1024(value: any): void;
  push_u2048(value: any): void;
  push_i128(value: any): void;
  push_i160(value: any): void;
  push_i256(value: any): void;
  push_i512(value: any): void;
  push_i1024(value: any): void;
  push_i2048(value: any): void;
  push_boolean(value: boolean): void;
  build(): CompactCiphertextList;
  build_packed(): CompactCiphertextList;
  build_with_proof_packed(crs: CompactPkeCrs, metadata: Uint8Array, compute_load: ZkComputeLoad): ProvenCompactCiphertextList;
  push_u72(value: any): void;
  push_u80(value: any): void;
  push_u88(value: any): void;
  push_u96(value: any): void;
  push_u104(value: any): void;
  push_u112(value: any): void;
  push_u120(value: any): void;
  push_u136(value: any): void;
  push_u144(value: any): void;
  push_u152(value: any): void;
  push_u168(value: any): void;
  push_u176(value: any): void;
  push_u184(value: any): void;
  push_u192(value: any): void;
  push_u200(value: any): void;
  push_u208(value: any): void;
  push_u216(value: any): void;
  push_u224(value: any): void;
  push_u232(value: any): void;
  push_u240(value: any): void;
  push_u248(value: any): void;
  push_i72(value: any): void;
  push_i80(value: any): void;
  push_i88(value: any): void;
  push_i96(value: any): void;
  push_i104(value: any): void;
  push_i112(value: any): void;
  push_i120(value: any): void;
  push_i136(value: any): void;
  push_i144(value: any): void;
  push_i152(value: any): void;
  push_i168(value: any): void;
  push_i176(value: any): void;
  push_i184(value: any): void;
  push_i192(value: any): void;
  push_i200(value: any): void;
  push_i208(value: any): void;
  push_i216(value: any): void;
  push_i224(value: any): void;
  push_i232(value: any): void;
  push_i240(value: any): void;
  push_i248(value: any): void;
}
export class CompactCiphertextListExpander {
  private constructor();
  free(): void;
  get_uint24(index: number): FheUint24;
  get_uint40(index: number): FheUint40;
  get_uint48(index: number): FheUint48;
  get_uint56(index: number): FheUint56;
  get_uint72(index: number): FheUint72;
  get_uint80(index: number): FheUint80;
  get_uint88(index: number): FheUint88;
  get_uint96(index: number): FheUint96;
  get_uint104(index: number): FheUint104;
  get_uint112(index: number): FheUint112;
  get_uint120(index: number): FheUint120;
  get_uint136(index: number): FheUint136;
  get_uint144(index: number): FheUint144;
  get_uint152(index: number): FheUint152;
  get_uint168(index: number): FheUint168;
  get_uint176(index: number): FheUint176;
  get_uint184(index: number): FheUint184;
  get_uint192(index: number): FheUint192;
  get_uint200(index: number): FheUint200;
  get_uint208(index: number): FheUint208;
  get_uint216(index: number): FheUint216;
  get_uint224(index: number): FheUint224;
  get_uint232(index: number): FheUint232;
  get_uint240(index: number): FheUint240;
  get_uint248(index: number): FheUint248;
  get_uint256(index: number): FheUint256;
  get_uint2(index: number): FheUint2;
  get_uint4(index: number): FheUint4;
  get_uint6(index: number): FheUint6;
  get_uint8(index: number): FheUint8;
  get_uint10(index: number): FheUint10;
  get_uint12(index: number): FheUint12;
  get_uint14(index: number): FheUint14;
  get_uint16(index: number): FheUint16;
  get_uint32(index: number): FheUint32;
  get_uint64(index: number): FheUint64;
  get_uint128(index: number): FheUint128;
  get_uint160(index: number): FheUint160;
  get_uint512(index: number): FheUint512;
  get_uint1024(index: number): FheUint1024;
  get_uint2048(index: number): FheUint2048;
  get_int24(index: number): FheInt24;
  get_int40(index: number): FheInt40;
  get_int48(index: number): FheInt48;
  get_int56(index: number): FheInt56;
  get_int72(index: number): FheInt72;
  get_int80(index: number): FheInt80;
  get_int88(index: number): FheInt88;
  get_int96(index: number): FheInt96;
  get_int104(index: number): FheInt104;
  get_int112(index: number): FheInt112;
  get_int120(index: number): FheInt120;
  get_int136(index: number): FheInt136;
  get_int144(index: number): FheInt144;
  get_int152(index: number): FheInt152;
  get_int168(index: number): FheInt168;
  get_int176(index: number): FheInt176;
  get_int184(index: number): FheInt184;
  get_int192(index: number): FheInt192;
  get_int200(index: number): FheInt200;
  get_int208(index: number): FheInt208;
  get_int216(index: number): FheInt216;
  get_int224(index: number): FheInt224;
  get_int232(index: number): FheInt232;
  get_int240(index: number): FheInt240;
  get_int248(index: number): FheInt248;
  get_int2(index: number): FheInt2;
  get_int4(index: number): FheInt4;
  get_int6(index: number): FheInt6;
  get_int8(index: number): FheInt8;
  get_int10(index: number): FheInt10;
  get_int12(index: number): FheInt12;
  get_int14(index: number): FheInt14;
  get_int16(index: number): FheInt16;
  get_int32(index: number): FheInt32;
  get_int64(index: number): FheInt64;
  get_int128(index: number): FheInt128;
  get_int160(index: number): FheInt160;
  get_int256(index: number): FheInt256;
  get_int512(index: number): FheInt512;
  get_int1024(index: number): FheInt1024;
  get_int2048(index: number): FheInt2048;
  get_bool(index: number): FheBool;
  len(): number;
  is_empty(): boolean;
  get_kind_of(index: number): FheTypes | undefined;
}
export class CompactPkeCrs {
  private constructor();
  free(): void;
  serialize(compress: boolean): Uint8Array;
  static deserialize(buffer: Uint8Array): CompactPkeCrs;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompactPkeCrs;
  static from_config(config: TfheConfig, max_num_bits: number): CompactPkeCrs;
  static deserialize_from_public_params(buffer: Uint8Array): CompactPkeCrs;
  static safe_deserialize_from_public_params(buffer: Uint8Array, serialized_size_limit: bigint): CompactPkeCrs;
}
export class CompressedFheBool {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: boolean, client_key: TfheClientKey): CompressedFheBool;
  decompress(): FheBool;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheBool;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheBool;
}
export class CompressedFheInt10 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt10;
  decompress(): FheInt10;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt10;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt10;
}
export class CompressedFheInt1024 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt1024;
  decompress(): FheInt1024;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt1024;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt1024;
}
export class CompressedFheInt104 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt104;
  decompress(): FheInt104;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt104;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt104;
}
export class CompressedFheInt112 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt112;
  decompress(): FheInt112;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt112;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt112;
}
export class CompressedFheInt12 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt12;
  decompress(): FheInt12;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt12;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt12;
}
export class CompressedFheInt120 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt120;
  decompress(): FheInt120;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt120;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt120;
}
export class CompressedFheInt128 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt128;
  decompress(): FheInt128;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt128;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt128;
}
export class CompressedFheInt136 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt136;
  decompress(): FheInt136;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt136;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt136;
}
export class CompressedFheInt14 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt14;
  decompress(): FheInt14;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt14;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt14;
}
export class CompressedFheInt144 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt144;
  decompress(): FheInt144;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt144;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt144;
}
export class CompressedFheInt152 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt152;
  decompress(): FheInt152;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt152;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt152;
}
export class CompressedFheInt16 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt16;
  decompress(): FheInt16;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt16;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt16;
}
export class CompressedFheInt160 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt160;
  decompress(): FheInt160;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt160;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt160;
}
export class CompressedFheInt168 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt168;
  decompress(): FheInt168;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt168;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt168;
}
export class CompressedFheInt176 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt176;
  decompress(): FheInt176;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt176;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt176;
}
export class CompressedFheInt184 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt184;
  decompress(): FheInt184;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt184;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt184;
}
export class CompressedFheInt192 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt192;
  decompress(): FheInt192;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt192;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt192;
}
export class CompressedFheInt2 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt2;
  decompress(): FheInt2;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt2;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt2;
}
export class CompressedFheInt200 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt200;
  decompress(): FheInt200;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt200;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt200;
}
export class CompressedFheInt2048 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt2048;
  decompress(): FheInt2048;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt2048;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt2048;
}
export class CompressedFheInt208 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt208;
  decompress(): FheInt208;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt208;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt208;
}
export class CompressedFheInt216 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt216;
  decompress(): FheInt216;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt216;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt216;
}
export class CompressedFheInt224 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt224;
  decompress(): FheInt224;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt224;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt224;
}
export class CompressedFheInt232 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt232;
  decompress(): FheInt232;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt232;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt232;
}
export class CompressedFheInt24 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt24;
  decompress(): FheInt24;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt24;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt24;
}
export class CompressedFheInt240 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt240;
  decompress(): FheInt240;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt240;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt240;
}
export class CompressedFheInt248 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt248;
  decompress(): FheInt248;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt248;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt248;
}
export class CompressedFheInt256 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt256;
  decompress(): FheInt256;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt256;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt256;
}
export class CompressedFheInt32 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt32;
  decompress(): FheInt32;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt32;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt32;
}
export class CompressedFheInt4 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt4;
  decompress(): FheInt4;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt4;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt4;
}
export class CompressedFheInt40 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheInt40;
  decompress(): FheInt40;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt40;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt40;
}
export class CompressedFheInt48 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheInt48;
  decompress(): FheInt48;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt48;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt48;
}
export class CompressedFheInt512 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt512;
  decompress(): FheInt512;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt512;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt512;
}
export class CompressedFheInt56 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheInt56;
  decompress(): FheInt56;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt56;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt56;
}
export class CompressedFheInt6 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt6;
  decompress(): FheInt6;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt6;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt6;
}
export class CompressedFheInt64 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheInt64;
  decompress(): FheInt64;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt64;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt64;
}
export class CompressedFheInt72 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt72;
  decompress(): FheInt72;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt72;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt72;
}
export class CompressedFheInt8 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheInt8;
  decompress(): FheInt8;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt8;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt8;
}
export class CompressedFheInt80 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt80;
  decompress(): FheInt80;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt80;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt80;
}
export class CompressedFheInt88 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt88;
  decompress(): FheInt88;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt88;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt88;
}
export class CompressedFheInt96 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheInt96;
  decompress(): FheInt96;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheInt96;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheInt96;
}
export class CompressedFheUint10 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint10;
  decompress(): FheUint10;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint10;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint10;
}
export class CompressedFheUint1024 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint1024;
  decompress(): FheUint1024;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint1024;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint1024;
}
export class CompressedFheUint104 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint104;
  decompress(): FheUint104;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint104;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint104;
}
export class CompressedFheUint112 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint112;
  decompress(): FheUint112;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint112;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint112;
}
export class CompressedFheUint12 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint12;
  decompress(): FheUint12;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint12;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint12;
}
export class CompressedFheUint120 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint120;
  decompress(): FheUint120;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint120;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint120;
}
export class CompressedFheUint128 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint128;
  decompress(): FheUint128;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint128;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint128;
}
export class CompressedFheUint136 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint136;
  decompress(): FheUint136;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint136;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint136;
}
export class CompressedFheUint14 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint14;
  decompress(): FheUint14;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint14;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint14;
}
export class CompressedFheUint144 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint144;
  decompress(): FheUint144;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint144;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint144;
}
export class CompressedFheUint152 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint152;
  decompress(): FheUint152;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint152;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint152;
}
export class CompressedFheUint16 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint16;
  decompress(): FheUint16;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint16;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint16;
}
export class CompressedFheUint160 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint160;
  decompress(): FheUint160;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint160;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint160;
}
export class CompressedFheUint168 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint168;
  decompress(): FheUint168;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint168;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint168;
}
export class CompressedFheUint176 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint176;
  decompress(): FheUint176;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint176;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint176;
}
export class CompressedFheUint184 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint184;
  decompress(): FheUint184;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint184;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint184;
}
export class CompressedFheUint192 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint192;
  decompress(): FheUint192;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint192;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint192;
}
export class CompressedFheUint2 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint2;
  decompress(): FheUint2;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint2;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint2;
}
export class CompressedFheUint200 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint200;
  decompress(): FheUint200;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint200;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint200;
}
export class CompressedFheUint2048 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint2048;
  decompress(): FheUint2048;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint2048;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint2048;
}
export class CompressedFheUint208 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint208;
  decompress(): FheUint208;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint208;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint208;
}
export class CompressedFheUint216 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint216;
  decompress(): FheUint216;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint216;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint216;
}
export class CompressedFheUint224 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint224;
  decompress(): FheUint224;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint224;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint224;
}
export class CompressedFheUint232 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint232;
  decompress(): FheUint232;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint232;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint232;
}
export class CompressedFheUint24 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint24;
  decompress(): FheUint24;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint24;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint24;
}
export class CompressedFheUint240 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint240;
  decompress(): FheUint240;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint240;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint240;
}
export class CompressedFheUint248 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint248;
  decompress(): FheUint248;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint248;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint248;
}
export class CompressedFheUint256 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint256;
  decompress(): FheUint256;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint256;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint256;
}
export class CompressedFheUint32 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint32;
  decompress(): FheUint32;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint32;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint32;
}
export class CompressedFheUint4 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint4;
  decompress(): FheUint4;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint4;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint4;
}
export class CompressedFheUint40 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheUint40;
  decompress(): FheUint40;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint40;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint40;
}
export class CompressedFheUint48 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheUint48;
  decompress(): FheUint48;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint48;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint48;
}
export class CompressedFheUint512 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint512;
  decompress(): FheUint512;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint512;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint512;
}
export class CompressedFheUint56 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheUint56;
  decompress(): FheUint56;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint56;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint56;
}
export class CompressedFheUint6 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint6;
  decompress(): FheUint6;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint6;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint6;
}
export class CompressedFheUint64 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): CompressedFheUint64;
  decompress(): FheUint64;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint64;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint64;
}
export class CompressedFheUint72 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint72;
  decompress(): FheUint72;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint72;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint72;
}
export class CompressedFheUint8 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): CompressedFheUint8;
  decompress(): FheUint8;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint8;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint8;
}
export class CompressedFheUint80 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint80;
  decompress(): FheUint80;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint80;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint80;
}
export class CompressedFheUint88 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint88;
  decompress(): FheUint88;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint88;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint88;
}
export class CompressedFheUint96 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): CompressedFheUint96;
  decompress(): FheUint96;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): CompressedFheUint96;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): CompressedFheUint96;
}
export class FheBool {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: boolean, client_key: TfheClientKey): FheBool;
  static encrypt_with_public_key(value: boolean, public_key: TfhePublicKey): FheBool;
  static encrypt_with_compressed_public_key(value: boolean, compressed_public_key: TfheCompressedPublicKey): FheBool;
  decrypt(client_key: TfheClientKey): boolean;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheBool;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheBool;
}
export class FheInt10 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt10;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt10;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt10;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt10;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt10;
}
export class FheInt1024 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt1024;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt1024;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt1024;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt1024;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt1024;
}
export class FheInt104 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt104;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt104;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt104;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt104;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt104;
}
export class FheInt112 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt112;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt112;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt112;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt112;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt112;
}
export class FheInt12 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt12;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt12;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt12;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt12;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt12;
}
export class FheInt120 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt120;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt120;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt120;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt120;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt120;
}
export class FheInt128 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt128;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt128;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt128;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt128;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt128;
}
export class FheInt136 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt136;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt136;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt136;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt136;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt136;
}
export class FheInt14 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt14;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt14;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt14;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt14;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt14;
}
export class FheInt144 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt144;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt144;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt144;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt144;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt144;
}
export class FheInt152 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt152;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt152;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt152;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt152;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt152;
}
export class FheInt16 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt16;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt16;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt16;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt16;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt16;
}
export class FheInt160 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt160;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt160;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt160;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt160;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt160;
}
export class FheInt168 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt168;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt168;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt168;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt168;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt168;
}
export class FheInt176 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt176;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt176;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt176;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt176;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt176;
}
export class FheInt184 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt184;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt184;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt184;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt184;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt184;
}
export class FheInt192 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt192;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt192;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt192;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt192;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt192;
}
export class FheInt2 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt2;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt2;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt2;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt2;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt2;
}
export class FheInt200 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt200;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt200;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt200;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt200;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt200;
}
export class FheInt2048 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt2048;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt2048;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt2048;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt2048;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt2048;
}
export class FheInt208 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt208;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt208;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt208;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt208;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt208;
}
export class FheInt216 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt216;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt216;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt216;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt216;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt216;
}
export class FheInt224 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt224;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt224;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt224;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt224;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt224;
}
export class FheInt232 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt232;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt232;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt232;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt232;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt232;
}
export class FheInt24 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt24;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt24;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt24;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt24;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt24;
}
export class FheInt240 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt240;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt240;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt240;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt240;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt240;
}
export class FheInt248 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt248;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt248;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt248;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt248;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt248;
}
export class FheInt256 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt256;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt256;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt256;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt256;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt256;
}
export class FheInt32 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt32;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt32;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt32;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt32;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt32;
}
export class FheInt4 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt4;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt4;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt4;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt4;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt4;
}
export class FheInt40 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheInt40;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheInt40;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheInt40;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt40;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt40;
}
export class FheInt48 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheInt48;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheInt48;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheInt48;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt48;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt48;
}
export class FheInt512 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt512;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt512;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt512;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt512;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt512;
}
export class FheInt56 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheInt56;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheInt56;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheInt56;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt56;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt56;
}
export class FheInt6 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt6;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt6;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt6;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt6;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt6;
}
export class FheInt64 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheInt64;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheInt64;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheInt64;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt64;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt64;
}
export class FheInt72 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt72;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt72;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt72;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt72;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt72;
}
export class FheInt8 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheInt8;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheInt8;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheInt8;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt8;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt8;
}
export class FheInt80 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt80;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt80;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt80;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt80;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt80;
}
export class FheInt88 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt88;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt88;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt88;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt88;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt88;
}
export class FheInt96 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheInt96;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheInt96;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheInt96;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheInt96;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheInt96;
}
export class FheUint10 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint10;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint10;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint10;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint10;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint10;
}
export class FheUint1024 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint1024;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint1024;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint1024;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint1024;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint1024;
}
export class FheUint104 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint104;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint104;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint104;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint104;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint104;
}
export class FheUint112 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint112;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint112;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint112;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint112;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint112;
}
export class FheUint12 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint12;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint12;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint12;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint12;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint12;
}
export class FheUint120 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint120;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint120;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint120;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint120;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint120;
}
export class FheUint128 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint128;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint128;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint128;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint128;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint128;
}
export class FheUint136 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint136;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint136;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint136;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint136;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint136;
}
export class FheUint14 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint14;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint14;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint14;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint14;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint14;
}
export class FheUint144 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint144;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint144;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint144;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint144;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint144;
}
export class FheUint152 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint152;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint152;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint152;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint152;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint152;
}
export class FheUint16 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint16;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint16;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint16;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint16;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint16;
}
export class FheUint160 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint160;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint160;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint160;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint160;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint160;
}
export class FheUint168 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint168;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint168;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint168;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint168;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint168;
}
export class FheUint176 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint176;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint176;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint176;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint176;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint176;
}
export class FheUint184 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint184;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint184;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint184;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint184;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint184;
}
export class FheUint192 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint192;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint192;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint192;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint192;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint192;
}
export class FheUint2 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint2;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint2;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint2;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint2;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint2;
}
export class FheUint200 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint200;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint200;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint200;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint200;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint200;
}
export class FheUint2048 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint2048;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint2048;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint2048;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint2048;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint2048;
}
export class FheUint208 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint208;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint208;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint208;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint208;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint208;
}
export class FheUint216 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint216;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint216;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint216;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint216;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint216;
}
export class FheUint224 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint224;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint224;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint224;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint224;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint224;
}
export class FheUint232 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint232;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint232;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint232;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint232;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint232;
}
export class FheUint24 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint24;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint24;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint24;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint24;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint24;
}
export class FheUint240 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint240;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint240;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint240;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint240;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint240;
}
export class FheUint248 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint248;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint248;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint248;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint248;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint248;
}
export class FheUint256 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint256;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint256;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint256;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint256;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint256;
}
export class FheUint32 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint32;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint32;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint32;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint32;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint32;
}
export class FheUint4 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint4;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint4;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint4;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint4;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint4;
}
export class FheUint40 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheUint40;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheUint40;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheUint40;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint40;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint40;
}
export class FheUint48 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheUint48;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheUint48;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheUint48;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint48;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint48;
}
export class FheUint512 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint512;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint512;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint512;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint512;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint512;
}
export class FheUint56 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheUint56;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheUint56;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheUint56;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint56;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint56;
}
export class FheUint6 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint6;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint6;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint6;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint6;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint6;
}
export class FheUint64 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: bigint, client_key: TfheClientKey): FheUint64;
  static encrypt_with_public_key(value: bigint, public_key: TfhePublicKey): FheUint64;
  static encrypt_with_compressed_public_key(value: bigint, compressed_public_key: TfheCompressedPublicKey): FheUint64;
  decrypt(client_key: TfheClientKey): bigint;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint64;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint64;
}
export class FheUint72 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint72;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint72;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint72;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint72;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint72;
}
export class FheUint8 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: number, client_key: TfheClientKey): FheUint8;
  static encrypt_with_public_key(value: number, public_key: TfhePublicKey): FheUint8;
  static encrypt_with_compressed_public_key(value: number, compressed_public_key: TfheCompressedPublicKey): FheUint8;
  decrypt(client_key: TfheClientKey): number;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint8;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint8;
}
export class FheUint80 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint80;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint80;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint80;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint80;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint80;
}
export class FheUint88 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint88;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint88;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint88;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint88;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint88;
}
export class FheUint96 {
  private constructor();
  free(): void;
  static encrypt_with_client_key(value: any, client_key: TfheClientKey): FheUint96;
  static encrypt_with_public_key(value: any, public_key: TfhePublicKey): FheUint96;
  static encrypt_with_compressed_public_key(value: any, compressed_public_key: TfheCompressedPublicKey): FheUint96;
  decrypt(client_key: TfheClientKey): any;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): FheUint96;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): FheUint96;
}
export class ProvenCompactCiphertextList {
  private constructor();
  free(): void;
  static builder(public_key: TfheCompactPublicKey): CompactCiphertextListBuilder;
  len(): number;
  is_empty(): boolean;
  get_kind_of(index: number): FheTypes | undefined;
  verify_and_expand(crs: CompactPkeCrs, public_key: TfheCompactPublicKey, metadata: Uint8Array): CompactCiphertextListExpander;
  expand_without_verification(): CompactCiphertextListExpander;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): ProvenCompactCiphertextList;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): ProvenCompactCiphertextList;
}
export class Shortint {
  private constructor();
  free(): void;
  static new_gaussian_from_std_dev(std_dev: number): ShortintNoiseDistribution;
  static try_new_t_uniform(bound_log2: number): ShortintNoiseDistribution;
  static new_parameters(lwe_dimension: number, glwe_dimension: number, polynomial_size: number, lwe_noise_distribution: ShortintNoiseDistribution, glwe_noise_distribution: ShortintNoiseDistribution, pbs_base_log: number, pbs_level: number, ks_base_log: number, ks_level: number, message_modulus: bigint, carry_modulus: bigint, max_noise_level: bigint, log2_p_fail: number, modulus_power_of_2_exponent: number, encryption_key_choice: ShortintEncryptionKeyChoice): ShortintParameters;
  static new_client_key_from_seed_and_parameters(seed_high_bytes: bigint, seed_low_bytes: bigint, parameters: ShortintParameters): ShortintClientKey;
  static new_client_key(parameters: ShortintParameters): ShortintClientKey;
  static new_public_key(client_key: ShortintClientKey): ShortintPublicKey;
  static new_compressed_public_key(client_key: ShortintClientKey): ShortintCompressedPublicKey;
  static new_compressed_server_key(client_key: ShortintClientKey): ShortintCompressedServerKey;
  static encrypt(client_key: ShortintClientKey, message: bigint): ShortintCiphertext;
  static encrypt_compressed(client_key: ShortintClientKey, message: bigint): ShortintCompressedCiphertext;
  static decompress_ciphertext(compressed_ciphertext: ShortintCompressedCiphertext): ShortintCiphertext;
  static encrypt_with_public_key(public_key: ShortintPublicKey, message: bigint): ShortintCiphertext;
  static encrypt_with_compressed_public_key(public_key: ShortintCompressedPublicKey, message: bigint): ShortintCiphertext;
  static decrypt(client_key: ShortintClientKey, ct: ShortintCiphertext): bigint;
  static serialize_ciphertext(ciphertext: ShortintCiphertext): Uint8Array;
  static deserialize_ciphertext(buffer: Uint8Array): ShortintCiphertext;
  static serialize_compressed_ciphertext(ciphertext: ShortintCompressedCiphertext): Uint8Array;
  static deserialize_compressed_ciphertext(buffer: Uint8Array): ShortintCompressedCiphertext;
  static serialize_client_key(client_key: ShortintClientKey): Uint8Array;
  static deserialize_client_key(buffer: Uint8Array): ShortintClientKey;
  static serialize_public_key(public_key: ShortintPublicKey): Uint8Array;
  static deserialize_public_key(buffer: Uint8Array): ShortintPublicKey;
  static serialize_compressed_public_key(public_key: ShortintCompressedPublicKey): Uint8Array;
  static deserialize_compressed_public_key(buffer: Uint8Array): ShortintCompressedPublicKey;
  static serialize_compressed_server_key(server_key: ShortintCompressedServerKey): Uint8Array;
  static deserialize_compressed_server_key(buffer: Uint8Array): ShortintCompressedServerKey;
}
export class ShortintCiphertext {
  private constructor();
  free(): void;
}
export class ShortintClientKey {
  private constructor();
  free(): void;
}
export class ShortintCompactPublicKeyEncryptionParameters {
  free(): void;
  constructor(name: ShortintCompactPublicKeyEncryptionParametersName);
  static new_parameters(encryption_lwe_dimension: number, encryption_noise_distribution: ShortintNoiseDistribution, message_modulus: bigint, carry_modulus: bigint, modulus_power_of_2_exponent: number, ks_base_log: number, ks_level: number, encryption_key_choice: ShortintEncryptionKeyChoice): ShortintCompactPublicKeyEncryptionParameters;
}
export class ShortintCompressedCiphertext {
  private constructor();
  free(): void;
}
export class ShortintCompressedPublicKey {
  private constructor();
  free(): void;
}
export class ShortintCompressedServerKey {
  private constructor();
  free(): void;
}
export class ShortintNoiseDistribution {
  private constructor();
  free(): void;
}
export class ShortintParameters {
  free(): void;
  lwe_dimension(): number;
  set_lwe_dimension(new_value: number): void;
  glwe_dimension(): number;
  set_glwe_dimension(new_value: number): void;
  polynomial_size(): number;
  set_polynomial_size(new_value: number): void;
  lwe_noise_distribution(): ShortintNoiseDistribution;
  set_lwe_noise_distribution(new_value: ShortintNoiseDistribution): void;
  glwe_noise_distribution(): ShortintNoiseDistribution;
  set_glwe_noise_distribution(new_value: ShortintNoiseDistribution): void;
  pbs_base_log(): number;
  set_pbs_base_log(new_value: number): void;
  pbs_level(): number;
  set_pbs_level(new_value: number): void;
  ks_base_log(): number;
  set_ks_base_log(new_value: number): void;
  ks_level(): number;
  set_ks_level(new_value: number): void;
  message_modulus(): bigint;
  set_message_modulus(new_value: bigint): void;
  carry_modulus(): bigint;
  set_carry_modulus(new_value: bigint): void;
  encryption_key_choice(): ShortintEncryptionKeyChoice;
  set_encryption_key_choice(new_value: ShortintEncryptionKeyChoice): void;
  constructor(name: ShortintParametersName);
}
export class ShortintPublicKey {
  private constructor();
  free(): void;
}
export class TfheClientKey {
  private constructor();
  free(): void;
  static generate(config: TfheConfig): TfheClientKey;
  static generate_with_seed(config: TfheConfig, seed: any): TfheClientKey;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): TfheClientKey;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): TfheClientKey;
}
export class TfheCompactPublicKey {
  private constructor();
  free(): void;
  static new(client_key: TfheClientKey): TfheCompactPublicKey;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): TfheCompactPublicKey;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): TfheCompactPublicKey;
  static safe_deserialize_conformant(buffer: Uint8Array, serialized_size_limit: bigint, conformance_params: ShortintCompactPublicKeyEncryptionParameters): TfheCompactPublicKey;
}
export class TfheCompressedCompactPublicKey {
  private constructor();
  free(): void;
  static new(client_key: TfheClientKey): TfheCompressedCompactPublicKey;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): TfheCompressedCompactPublicKey;
  decompress(): TfheCompactPublicKey;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): TfheCompressedCompactPublicKey;
  static safe_deserialize_conformant(buffer: Uint8Array, serialized_size_limit: bigint, conformance_params: ShortintCompactPublicKeyEncryptionParameters): TfheCompressedCompactPublicKey;
}
export class TfheCompressedPublicKey {
  private constructor();
  free(): void;
  static new(client_key: TfheClientKey): TfheCompressedPublicKey;
  decompress(): TfhePublicKey;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): TfheCompressedPublicKey;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): TfheCompressedPublicKey;
}
export class TfheCompressedServerKey {
  private constructor();
  free(): void;
  static new(client_key: TfheClientKey): TfheCompressedServerKey;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): TfheCompressedServerKey;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): TfheCompressedServerKey;
}
export class TfheConfig {
  private constructor();
  free(): void;
}
export class TfheConfigBuilder {
  private constructor();
  free(): void;
  static default(): TfheConfigBuilder;
  static with_custom_parameters(block_parameters: ShortintParameters): TfheConfigBuilder;
  use_custom_parameters(block_parameters: ShortintParameters): TfheConfigBuilder;
  use_dedicated_compact_public_key_parameters(compact_public_key_parameters: ShortintCompactPublicKeyEncryptionParameters): TfheConfigBuilder;
  build(): TfheConfig;
}
export class TfhePublicKey {
  private constructor();
  free(): void;
  static new(client_key: TfheClientKey): TfhePublicKey;
  serialize(): Uint8Array;
  static deserialize(buffer: Uint8Array): TfhePublicKey;
  safe_serialize(serialized_size_limit: bigint): Uint8Array;
  static safe_deserialize(buffer: Uint8Array, serialized_size_limit: bigint): TfhePublicKey;
}
export class TfheServerKey {
  private constructor();
  free(): void;
  static new(client_key: TfheClientKey): TfheServerKey;
}
export class tfhe {
  private constructor();
  free(): void;
}
