import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { doc } from 'prettier';
import { createBinaryOperationPrinter } from './create-binary-operation-printer.js';
import { createKindCheckFunction } from '../slang-utils/create-kind-check-function.js';
import { isBinaryOperation } from '../slang-utils/is-binary-operation.js';
const { group, indent } = doc.builders;
export const binaryGroupRulesBuilder = (shouldGroup) => (path) => (document) => {
    const grandparentNode = path.grandparent;
    if (!isBinaryOperation(grandparentNode))
        return group(document);
    if (shouldGroup(grandparentNode))
        return group(document);
    return document;
};
const isStatementWithoutIndentedOperation = createKindCheckFunction([
    NonterminalKind.ReturnStatement,
    NonterminalKind.IfStatement,
    NonterminalKind.WhileStatement
]);
export const shouldNotIndent = (node, path, index) => isStatementWithoutIndentedOperation(node) ||
    (node.kind === NonterminalKind.ExpressionStatement &&
        path.getNode(index + 1).kind ===
            NonterminalKind.ForStatementCondition);
export const binaryIndentRulesBuilder = (shouldIndent) => (path) => (document) => {
    for (let i = 2, node = path.node;; i += 2) {
        const grandparentNode = path.getNode(i);
        if (shouldNotIndent(grandparentNode, path, i))
            break;
        if (!isBinaryOperation(grandparentNode))
            return indent(document);
        if (shouldIndent(grandparentNode))
            return indent(document);
        if (node === grandparentNode.rightOperand.variant)
            break;
        node = grandparentNode;
    }
    return document;
};
export const printBinaryOperation = (shouldGroupAndIndent) => createBinaryOperationPrinter(binaryGroupRulesBuilder(shouldGroupAndIndent), binaryIndentRulesBuilder(shouldGroupAndIndent));
//# sourceMappingURL=print-binary-operation.js.map