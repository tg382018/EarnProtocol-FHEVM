import { doc } from 'prettier';
import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { Expression } from './Expression.js';
const { group, indent, line } = doc.builders;
function printExpression(node, path, print, options) {
    var _a;
    const expressionVariant = (_a = node.expression) === null || _a === void 0 ? void 0 : _a.variant;
    if (expressionVariant) {
        return expressionVariant.kind === NonterminalKind.TupleExpression ||
            (options.experimentalTernaries &&
                expressionVariant.kind === NonterminalKind.ConditionalExpression)
            ? [' ', path.call(print, 'expression')]
            : group(indent([line, path.call(print, 'expression')]));
    }
    return '';
}
export class ReturnStatement {
    constructor(ast, options) {
        this.kind = NonterminalKind.ReturnStatement;
        let metadata = getNodeMetadata(ast);
        if (ast.expression) {
            this.expression = new Expression(ast.expression, options);
        }
        metadata = updateMetadata(metadata, [this.expression]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print, options) {
        return ['return', printExpression(this, path, print, options), ';'];
    }
}
//# sourceMappingURL=ReturnStatement.js.map