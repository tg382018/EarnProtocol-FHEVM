import { ethers as EthersT } from "ethers";
export declare const MAX_UINT8 = 255n;
export declare const MAX_UINT16 = 65535n;
export declare const MAX_UINT32 = 4294967295n;
export declare const MAX_UINT64 = 18446744073709551615n;
export declare const MAX_UINT128 = 340282366920938463463374607431768211455n;
export declare const MAX_UINT160 = 1461501637330902918203684832716283019655932542975n;
export declare const MAX_UINT256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935n;
export declare const MAX_UINT512 = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095n;
export declare function toUIntNumber(value: EthersT.BigNumberish, name?: string): number;
export declare function isInt(value: unknown): value is EthersT.Numeric;
export declare function isUInt(value: unknown): value is EthersT.Numeric;
export declare function isEvenUInt(value: unknown): value is EthersT.Numeric;
export declare function boolToBigInt(value: EthersT.Numeric | boolean): 0n | 1n;
export declare function bitwiseNotUIntBits(value: bigint, numBits: number | bigint): bigint;
export declare function getMaxBigInt(bitLength: number): bigint;
export declare function log2BigInt(x: bigint): bigint;
export declare function getRandomBigInt(numBits: number): bigint;
export declare function assertIsUintNumber(value: unknown, valueName?: string): asserts value is number;
export declare function assertIsBigUint8(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint16(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint32(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint64(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint128(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint160(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint256(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint512(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint1024(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBigUint2048(value: unknown, valueName?: string): asserts value is bigint;
export declare function assertIsBoolean(value: unknown, valueName?: string): asserts value is boolean;
export declare function assertIsNumber(value: unknown, valueName?: string): asserts value is boolean;
//# sourceMappingURL=math.d.ts.map