import { ethers as EthersT } from "ethers";
export declare function assertIsUint8Array(value: unknown, valueName?: string): asserts value is Uint8Array;
export declare function assertIsBytesLike(value: unknown, valueName?: string): asserts value is EthersT.BytesLike;
export declare function assertIsBytes32String(value: unknown, valueName?: string): asserts value is string;
export declare function assertIsBytesString(value: unknown, width?: number, valueName?: string): asserts value is string;
export declare function assertIsBytes1(value: unknown, valueName?: string): asserts value is Uint8Array;
export declare function assertIsBytes8(value: unknown, valueName?: string): asserts value is Uint8Array;
export declare function assertIsBytes20(value: unknown, valueName?: string): asserts value is Uint8Array;
export declare function assertIsBytes32(value: unknown, valueName?: string): asserts value is Uint8Array;
export declare function assertIsBytes(value: unknown, width?: number, valueName?: string): asserts value is Uint8Array;
export declare function bytesToBigInt(byteArray: Uint8Array): bigint;
export declare function uintToBytes(value: EthersT.BigNumberish, width: number): Uint8Array;
export declare function concatBytes(...arrays: Uint8Array[]): Uint8Array;
//# sourceMappingURL=bytes.d.ts.map