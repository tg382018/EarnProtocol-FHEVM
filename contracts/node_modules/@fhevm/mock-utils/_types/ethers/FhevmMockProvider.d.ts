import { ethers as EthersT } from "ethers";
import { type MinimalProvider } from "./provider.js";
export declare enum FhevmMockProviderType {
    Unknown = 0,
    Hardhat = 1,
    HardhatNode = 2,
    Anvil = 3,
    SepoliaEthereum = 4
}
export type FhevmMockProviderMethods = {
    setCode?: string;
    impersonateAccount?: string;
    setBalance?: string;
};
export type FhevmMockProviderInfo = {
    web3ClientVersion: string;
    chainId: number;
    url: string | undefined;
    networkName: string;
    type: FhevmMockProviderType;
    methods: FhevmMockProviderMethods;
};
export declare class FhevmMockProvider {
    #private;
    static fromReadonlyProvider(readonlyProvider: EthersT.Provider & MinimalProvider, networkName: string, defaultProviderType: FhevmMockProviderType | undefined, defaultChainId: number | undefined, url: string | undefined): Promise<FhevmMockProvider>;
    static create(minimalProvider: MinimalProvider, readonlyEthersProvider: EthersT.Provider | undefined, networkName: string, defaultProviderType: FhevmMockProviderType | undefined, defaultChainId: number | undefined, url: string | undefined): Promise<FhevmMockProvider>;
    setDebugFunc(debugFunc: (message: string) => void): void;
    get readonlyEthersProvider(): EthersT.Provider;
    get minimalProvider(): MinimalProvider;
    get info(): FhevmMockProviderInfo;
    get isMock(): boolean;
    get isSepoliaEthereum(): boolean;
    get isHardhatWeb3Client(): boolean;
    get chainId(): number;
    impersonateAddressAndSetBalance(address: string, balance: bigint): Promise<EthersT.Signer | undefined>;
    setCodeAt(address: string, byteCode: string): Promise<void>;
    send(method: string, params?: any[]): Promise<any>;
    getCodeAt(address: string): Promise<string>;
    getBlockNumber(): Promise<number>;
    unsetTemporaryMinimumBlockGasLimit(): Promise<void>;
    setTemporaryMinimumBlockGasLimit(minBlockGasLimit: bigint): Promise<undefined>;
    setBlockGasLimit(blockGasLimit: bigint): Promise<void>;
    getBlockGasLimit(): Promise<bigint | undefined>;
    private _debug;
}
//# sourceMappingURL=FhevmMockProvider.d.ts.map