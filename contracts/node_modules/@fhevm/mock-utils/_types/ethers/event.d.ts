export declare function assertEventArgIsBigUint8(value: unknown, eventName: string, argIndex: number): asserts value is bigint;
export declare function assertEventArgIsBigUint256(value: unknown, eventName: string, argIndex: number): asserts value is bigint;
export declare function assertEventArgIsBytes1String(value: unknown, eventName: string, argIndex: number): asserts value is string;
export declare function assertEventArgIsBytes4String(value: unknown, eventName: string, argIndex: number): asserts value is string;
export declare function assertEventArgIsBytes8String(value: unknown, eventName: string, argIndex: number): asserts value is string;
export declare function assertEventArgIsBytes16String(value: unknown, eventName: string, argIndex: number): asserts value is string;
export declare function assertEventArgIsBytes32String(value: unknown, eventName: string, argIndex: number): asserts value is string;
export declare function assertEventArgIsBytesString(value: unknown, eventName: string, argIndex: number): asserts value is string;
export declare function assertEventArgIsAddress(value: unknown, eventName: string, argIndex: number): asserts value is string;
export declare class BlockLogCursor {
    #private;
    constructor(fromBlockNumber: number);
    static check(blockNumber: number, blockLogIndex: number): void;
    get isEmpty(): boolean;
    get nextBlockNumber(): number;
    get blockNumber(): number;
    get blockLogIndex(): number;
    gt(blockNumber: number, blockLogIndex: number): boolean;
    eq(blockNumber: number, blockLogIndex: number): boolean;
    ge(blockNumber: number, blockLogIndex: number): boolean;
    updateForward(blockNumber: number, blockLogIndex: number): void;
    updateForwardOrBackward(blockNumber: number, blockLogIndex: number): void;
    update(blockNumber: number, blockLogIndex: number): void;
}
//# sourceMappingURL=event.d.ts.map