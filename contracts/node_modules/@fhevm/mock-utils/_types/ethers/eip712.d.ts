import { ethers as EthersT } from "ethers";
export type EthersEIP712 = {
    domain: EthersT.TypedDataDomain;
    message: Record<string, unknown>;
    types: Record<string, Array<EthersT.TypedDataField>>;
};
export type EIP712Domain = {
    fields: number;
    name: string;
    version: string;
    chainId: bigint;
    verifyingContract: string;
    salt: EthersT.BytesLike;
};
export declare function signEIP712(signer: EthersT.Signer, domain: EthersT.TypedDataDomain, types: Record<string, Array<EthersT.TypedDataField>>, message: Record<string, unknown>): Promise<string>;
export declare function multiSignEIP712(signers: EthersT.Signer[], domain: EthersT.TypedDataDomain, types: Record<string, Array<EthersT.TypedDataField>>, message: Record<string, unknown>): Promise<string[]>;
export declare function assertIsEIP712Domain(eip712Domain: unknown[], name: string, expectedDomain: {
    name: string;
    version: string;
    chainId: bigint;
    verifyingContract: string;
}): asserts eip712Domain is [unknown, string, string, bigint, string];
export declare function isThresholdReached(signersAddress: string[], recoveredAddresses: string[], threshold: number, signerType: string): boolean;
//# sourceMappingURL=eip712.d.ts.map