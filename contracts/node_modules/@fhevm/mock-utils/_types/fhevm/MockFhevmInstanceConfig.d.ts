import { ethers as EthersT } from "ethers";
import type { FhevmInstanceConfig } from "../relayer-sdk/types.js";
import { FhevmContractsRepository } from "./contracts/FhevmContractsRepository.js";
export declare class MockFhevmInstanceConfig implements FhevmInstanceConfig {
    #private;
    private constructor();
    static formConfig(config: FhevmInstanceConfig, options?: {
        noMetamaskChainSwap?: boolean;
        kmsSignersPrivateKeys?: string[];
        coprocessorSignersPrivateKeys?: string[];
        relayerSignerPrivateKey?: string;
    }): Promise<MockFhevmInstanceConfig>;
    get readonlyRunner(): EthersT.JsonRpcProvider;
    get relayerProvider(): EthersT.JsonRpcProvider;
    get contractsRepository(): FhevmContractsRepository;
    get network(): string;
    get relayerUrl(): string;
    get chainId(): number;
    get aclContractAddress(): string;
    get kmsContractAddress(): string;
    get inputVerifierContractAddress(): string;
    get gatewayChainId(): number;
    get verifyingContractAddressDecryption(): string;
    get verifyingContractAddressInputVerification(): string;
    get kmsSigners(): EthersT.Signer[] | undefined;
    get coprocessorSigners(): EthersT.Signer[] | undefined;
}
//# sourceMappingURL=MockFhevmInstanceConfig.d.ts.map