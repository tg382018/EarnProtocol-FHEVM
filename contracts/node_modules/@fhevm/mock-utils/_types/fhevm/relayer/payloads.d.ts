export type RelayerMetadata = {
    version: string;
    chainId: number;
    gatewayChainId: number;
    ACLAddress: string;
    CoprocessorAddress: string;
    DecryptionOracleAddress: string;
    KMSVerifierAddress: string;
    InputVerifierAddress: string;
    relayerSignerAddress: string;
};
export type RelayerV1UserDecryptHandleContractPair = {
    handle: string;
    contractAddress: string;
};
export type RelayerV1InputProofPayload = {
    contractAddress: string;
    userAddress: string;
    ciphertextWithInputVerification: string;
    contractChainId: string;
    extraData: string;
};
export type RelayerV1InputProofResponse = {
    handles: string[];
    signatures: string[];
};
export type RelayerV1UserDecryptPayload = {
    handleContractPairs: RelayerV1UserDecryptHandleContractPair[];
    requestValidity: RelayerV1UserDecryptValidity;
    contractsChainId: string;
    contractAddresses: string[];
    userAddress: string;
    signature: string;
    publicKey: string;
    extraData: string;
};
export type RelayerV1UserDecryptValidity = {
    startTimestamp: string;
    durationDays: string;
};
export type RelayerV1PublicDecryptPayload = {
    ciphertextHandles: string[];
    extraData: string;
};
export type RelayerV1PublicDecryptResponse = {
    decrypted_value: string;
    signatures: string[];
};
export type RelayerV1UserDecryptResponse = {
    payload: {
        decrypted_values: string[];
    };
    signature: string;
};
export declare function assertIsRelayerV1InputProofPayload(value: unknown): asserts value is RelayerV1InputProofPayload;
export declare function assertIsRelayerV1InputProofResponse(value: unknown): asserts value is RelayerV1InputProofResponse;
export declare function assertIsRelayerV1PublicDecryptPayload(value: unknown): asserts value is RelayerV1PublicDecryptPayload;
export declare function assertIsRelayerV1PublicDecryptResponse(value: unknown): asserts value is RelayerV1PublicDecryptResponse;
export declare function assertIsRelayerV1UserDecryptResponse(value: unknown): asserts value is RelayerV1UserDecryptResponse;
export declare function assertIsRelayerV1UserDecryptPayload(value: unknown): asserts value is RelayerV1UserDecryptPayload;
export declare function assertIsRelayerMetadata(value: unknown): asserts value is RelayerMetadata;
//# sourceMappingURL=payloads.d.ts.map