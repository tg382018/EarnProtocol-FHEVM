import { ethers as EthersT } from "ethers";
import { FhevmCoprocessorContractWrapper } from "./FhevmContractWrapper.js";
export type ACLProperties = {
    fhevmExecutorAddress?: string;
    version?: string;
};
export declare class ACL extends FhevmCoprocessorContractWrapper {
    #private;
    constructor();
    static create(runner: EthersT.ContractRunner, aclContractAddress: string, abi?: EthersT.Interface | EthersT.InterfaceAbi, properties?: ACLProperties): Promise<ACL>;
    get readonlyContract(): EthersT.Contract;
    get interface(): EthersT.Interface;
    get address(): string;
    get version(): string;
    get fhevmExecutorAddress(): string;
    private _initialize;
    checkIsAllowedForDecryption(handlesBytes32Hex: string[], readonlyProvider: EthersT.Provider): Promise<void>;
}
//# sourceMappingURL=ACL.d.ts.map