import { ethers as EthersT } from "ethers";
import type { FhevmInstanceConfig } from "../../relayer-sdk/types.js";
import { ACL, type ACLProperties } from "./ACL.js";
import { FHEVMExecutor, type FHEVMExecutorProperties } from "./FHEVMExecutor.js";
import type { FhevmContractWrapper, FhevmCoprocessorContractWrapper, FhevmDecryptionOracleContractWrapper } from "./FhevmContractWrapper.js";
import { HCULimit, type HCULimitProperties } from "./HCULimit.js";
import { InputVerifier, type InputVerifierProperties } from "./InputVerifier.js";
import { KMSVerifier, type KMSVerifierProperties } from "./KMSVerifier.js";
import { ZamaFheDecryptionOracle } from "./ZamaFheDecryptionOracle.js";
import { type FhevmContractName, type FhevmCoprocessorContractName, type FhevmDecryptionOracleContractName } from "./index.js";
export declare class FhevmContractsRepository {
    #private;
    constructor();
    static create(ethersReadonlyProvider: EthersT.Provider, config: {
        aclContractAddress: string;
        kmsContractAddress: string;
        zamaFheDecryptionOracleAddress?: string;
        aclAbi?: EthersT.Interface | EthersT.InterfaceAbi;
        fhevmExecutorAbi?: EthersT.Interface | EthersT.InterfaceAbi;
        hcuLimitAbi?: EthersT.Interface | EthersT.InterfaceAbi;
        kmsVerifierAbi?: EthersT.Interface | EthersT.InterfaceAbi;
        inputVerifierAbi?: EthersT.Interface | EthersT.InterfaceAbi;
        zamaFheDecryptionOracleAbi?: EthersT.Interface | EthersT.InterfaceAbi;
        aclProperties?: ACLProperties;
        fhevmExecutorProperties?: FHEVMExecutorProperties;
        inputVerifierProperties?: InputVerifierProperties;
        kmsVerifierProperties?: KMSVerifierProperties;
        hcuLimitProperties?: HCULimitProperties;
    }): Promise<FhevmContractsRepository>;
    addressToContractMap(): Record<string, FhevmContractWrapper>;
    getContractFromAddress(address: string): FhevmContractWrapper | undefined;
    getContractFromName(name: FhevmContractName): FhevmContractWrapper | undefined;
    getCoprocessorContractFromName(name: FhevmCoprocessorContractName): FhevmCoprocessorContractWrapper;
    getDecryptionOracleContractFromName(name: FhevmDecryptionOracleContractName): FhevmDecryptionOracleContractWrapper | undefined;
    getCoprocessorInterfaceFromName(name: FhevmCoprocessorContractName): EthersT.Interface;
    getDecryptionOracleInterfaceFromName(name: FhevmDecryptionOracleContractName): EthersT.Interface | undefined;
    get zamaFheDecryptionOracle(): ZamaFheDecryptionOracle | undefined;
    get acl(): ACL;
    get fhevmExecutor(): FHEVMExecutor;
    get inputVerifier(): InputVerifier;
    get kmsVerifier(): KMSVerifier;
    get hcuLimit(): HCULimit;
    getFhevmInstanceConfig(params: {
        chainId: number;
        relayerUrl: string;
    }): FhevmInstanceConfig & {
        fhevmExecutorContractAddress: string;
        decryptionOracleAddress?: string;
    };
}
//# sourceMappingURL=FhevmContractsRepository.d.ts.map