import { FheType } from "./FheType.js";
export declare enum FhevmOperator {
    fheAdd = 0,
    fheSub = 1,
    fheMul = 2,
    fheDiv = 3,
    fheRem = 4,
    fheBitAnd = 5,
    fheBitOr = 6,
    fheBitXor = 7,
    fheShl = 8,
    fheShr = 9,
    fheRotl = 10,
    fheRotr = 11,
    fheEq = 12,
    fheNe = 13,
    fheGe = 14,
    fheGt = 15,
    fheLe = 16,
    fheLt = 17,
    fheMin = 18,
    fheMax = 19,
    fheNeg = 20,
    fheNot = 21,
    verifyCiphertext = 22,
    cast = 23,
    trivialEncrypt = 24,
    fheIfThenElse = 25,
    fheRand = 26,
    fheRandBounded = 27
}
export declare class FhevmHandleCoder {
    #private;
    constructor(aclAddress: string, chainId: number);
    fheAdd(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheSub(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheMul(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheDiv(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheRem(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheBitAnd(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheBitOr(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheBitXor(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheShl(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheShr(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheRotl(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheRotr(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheEq(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheNe(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheGe(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheGt(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheLe(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
    fheLt(lhsBytes32Hex: string, rhsBytes32Hex: string, scalar: boolean): string;
}
export declare function createBinaryOpHandle(op: FhevmOperator, lhs: string, rhs: string, scalar: string | boolean, type: FheType, aclAddress: string, chainId: number): string;
export declare function createNumericalOpHandle(op: FhevmOperator, lhs: string, rhs: string, scalar: string | boolean, aclAddress: string, chainId: number): string;
export declare function createBitwiseOpHandle(op: FhevmOperator, lhs: string, rhs: string, scalar: string | boolean, aclAddress: string, chainId: number): string;
export declare function createCompareOpHandle(op: FhevmOperator, lhs: string, rhs: string, scalar: string | boolean, aclAddress: string, chainId: number): string;
//# sourceMappingURL=FhevmHandleCoder.d.ts.map