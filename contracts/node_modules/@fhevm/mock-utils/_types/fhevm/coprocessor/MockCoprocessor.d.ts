import { ethers as EthersT } from "ethers";
import type { FhevmDB, FhevmDBHandleMetadata } from "../db/FhevmDB.js";
import type { RelayerV1InputProofResponse } from "../relayer/payloads.js";
import type { Coprocessor } from "./Coprocessor.js";
export declare class MockCoprocessor implements Coprocessor {
    #private;
    constructor();
    static create(readonlyProvider: EthersT.Provider, params: {
        coprocessorContractAddress: string;
        coprocessorContractInterface?: EthersT.Interface;
        coprocessorSigners: EthersT.Signer[];
        inputVerifierContractAddress: string;
        db: FhevmDB;
    }): Promise<MockCoprocessor>;
    getDB(): FhevmDB;
    awaitCoprocessor(): Promise<void>;
    clearHandleDB(): Promise<void>;
    handleEvmRevert(newBlockNumber: number): Promise<void>;
    insertHandleBytes32(handleBytes32Hex: string, clearTextHex: string, metadata: FhevmDBHandleMetadata): Promise<void>;
    queryHandlesBytes32AsHex(handlesBytes32: string[]): Promise<string[]>;
    computeCoprocessorSignatures(handlesBytes32List: Uint8Array[], contractChainId: number, contractAddress: string, userAddress: string, extraData: string): Promise<RelayerV1InputProofResponse>;
}
//# sourceMappingURL=MockCoprocessor.d.ts.map