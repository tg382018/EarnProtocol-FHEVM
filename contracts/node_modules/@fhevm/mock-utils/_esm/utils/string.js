import { FhevmError, assertFhevm } from "./error.js";
export function removePrefix(s, prefix) {
    return s.startsWith(prefix) ? s.substring(prefix.length) : s;
}
export function removeSuffix(s, suffix) {
    return s.endsWith(suffix) ? s.substring(0, s.length - suffix.length) : s;
}
export function ensure0x(s) {
    return !s.startsWith("0x") ? `0x${s}` : s;
}
export function remove0x(s) {
    return s.startsWith("0x") ? s.substring(2) : s;
}
export function ensurePrefix(s, prefix) {
    return !s.startsWith(prefix) ? prefix + s : s;
}
export function ensureSuffix(s, suffix) {
    return !s.endsWith(suffix) ? s + suffix : s;
}
export function assertIsString(value, valueName) {
    assertFhevm(typeof value === "string", `${valueName ?? "value"} is not of type string, got ${typeof value} instead`);
}
export function assertIsStringArray(value, valueName) {
    if (!Array.isArray(value)) {
        throw new FhevmError(`${valueName ?? "value"} is not an array of string`);
    }
    for (let i = 0; i < value.length; ++i) {
        assertFhevm(typeof value[i] === "string", `${valueName ?? "value"}[${i}] is not of type string, got ${typeof value[i]} instead`);
    }
}
export function assertIsStringProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        if (typeof prop !== "string") {
            throw new FhevmError(`Expected '${key}' in ${typeName} to be a string, but got ${typeof prop} instead.`);
        }
    }
}
export function assertIsStringArrayProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        assertIsStringArray(prop, ` ${typeName}.${key}`);
    }
}
export function toLowerCaseSet(array) {
    const s = new Set();
    for (let i = 0; i < array.length; ++i) {
        const item = array[i];
        if (item) {
            s.add(item.toLowerCase());
        }
    }
    return s;
}
//# sourceMappingURL=string.js.map