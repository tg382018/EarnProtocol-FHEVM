import { ethers as EthersT } from "ethers";
import { FhevmError, assertFhevm, assertIsArray } from "./error.js";
import { assertIsString, toLowerCaseSet } from "./string.js";
export function assertIsAddress(value, valueName) {
    assertIsString(value, valueName);
    assertFhevm(EthersT.isAddress(value), `${valueName ?? "value"}: '${value}' is not a valid address`);
}
export function assertIsAddressArray(value, valueName) {
    assertIsArray(value, valueName);
    for (let i = 0; i < value.length; ++i) {
        assertIsAddress(value[i], valueName ? `${valueName}[${i}]` : undefined);
    }
}
export function assertIsAddressProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        if (typeof prop !== "string") {
            throw new FhevmError(`Expected '${key}' in ${typeName} to be a valid address, but got ${typeof prop} instead.`);
        }
        if (!EthersT.isAddress(prop)) {
            throw new FhevmError(`Expected '${key}' in ${typeName} to be a valid address, but got ${typeof prop} instead.`);
        }
    }
}
export function addressToBytes(value, valueName) {
    assertIsAddress(value, valueName);
    // Debug
    assertFhevm(EthersT.zeroPadValue(value, 20).toLocaleLowerCase() === EthersT.toBeHex(value, 20));
    // Should use this line of code instead (faster)
    //return EthersT.getBytes(EthersT.zeroPadValue(value, 20));
    return EthersT.getBytes(EthersT.toBeHex(value, 20));
}
export function addressesInAddressList(addresses, addressList) {
    const s = toLowerCaseSet(addressList);
    for (let i = 0; i < addresses.length; ++i) {
        if (!s.has(addresses[i].toLowerCase())) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=address.js.map