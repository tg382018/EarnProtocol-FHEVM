var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FhevmHandleCoder_aclAddress, _FhevmHandleCoder_chainId;
import { ethers as EthersT } from "ethers";
import constants from "../constants.js";
import { FhevmError } from "../utils/error.js";
import { FheType } from "./FheType.js";
import { FhevmHandle } from "./FhevmHandle.js";
export var FhevmOperator;
(function (FhevmOperator) {
    FhevmOperator[FhevmOperator["fheAdd"] = 0] = "fheAdd";
    FhevmOperator[FhevmOperator["fheSub"] = 1] = "fheSub";
    FhevmOperator[FhevmOperator["fheMul"] = 2] = "fheMul";
    FhevmOperator[FhevmOperator["fheDiv"] = 3] = "fheDiv";
    FhevmOperator[FhevmOperator["fheRem"] = 4] = "fheRem";
    FhevmOperator[FhevmOperator["fheBitAnd"] = 5] = "fheBitAnd";
    FhevmOperator[FhevmOperator["fheBitOr"] = 6] = "fheBitOr";
    FhevmOperator[FhevmOperator["fheBitXor"] = 7] = "fheBitXor";
    FhevmOperator[FhevmOperator["fheShl"] = 8] = "fheShl";
    FhevmOperator[FhevmOperator["fheShr"] = 9] = "fheShr";
    FhevmOperator[FhevmOperator["fheRotl"] = 10] = "fheRotl";
    FhevmOperator[FhevmOperator["fheRotr"] = 11] = "fheRotr";
    FhevmOperator[FhevmOperator["fheEq"] = 12] = "fheEq";
    FhevmOperator[FhevmOperator["fheNe"] = 13] = "fheNe";
    FhevmOperator[FhevmOperator["fheGe"] = 14] = "fheGe";
    FhevmOperator[FhevmOperator["fheGt"] = 15] = "fheGt";
    FhevmOperator[FhevmOperator["fheLe"] = 16] = "fheLe";
    FhevmOperator[FhevmOperator["fheLt"] = 17] = "fheLt";
    FhevmOperator[FhevmOperator["fheMin"] = 18] = "fheMin";
    FhevmOperator[FhevmOperator["fheMax"] = 19] = "fheMax";
    FhevmOperator[FhevmOperator["fheNeg"] = 20] = "fheNeg";
    FhevmOperator[FhevmOperator["fheNot"] = 21] = "fheNot";
    FhevmOperator[FhevmOperator["verifyCiphertext"] = 22] = "verifyCiphertext";
    FhevmOperator[FhevmOperator["cast"] = 23] = "cast";
    FhevmOperator[FhevmOperator["trivialEncrypt"] = 24] = "trivialEncrypt";
    FhevmOperator[FhevmOperator["fheIfThenElse"] = 25] = "fheIfThenElse";
    FhevmOperator[FhevmOperator["fheRand"] = 26] = "fheRand";
    FhevmOperator[FhevmOperator["fheRandBounded"] = 27] = "fheRandBounded";
})(FhevmOperator || (FhevmOperator = {}));
export class FhevmHandleCoder {
    constructor(aclAddress, chainId) {
        _FhevmHandleCoder_aclAddress.set(this, void 0);
        _FhevmHandleCoder_chainId.set(this, void 0);
        if (!EthersT.isAddress(aclAddress)) {
            throw new FhevmError(`Invalid ACL address`);
        }
        if (typeof chainId !== "number") {
            throw new FhevmError(`Invalid chainId`);
        }
        __classPrivateFieldSet(this, _FhevmHandleCoder_aclAddress, aclAddress, "f");
        __classPrivateFieldSet(this, _FhevmHandleCoder_chainId, chainId, "f");
    }
    fheAdd(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createNumericalOpHandle(FhevmOperator.fheAdd, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheSub(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createNumericalOpHandle(FhevmOperator.fheSub, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheMul(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createNumericalOpHandle(FhevmOperator.fheMul, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheDiv(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createNumericalOpHandle(FhevmOperator.fheDiv, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheRem(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createNumericalOpHandle(FhevmOperator.fheRem, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheBitAnd(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createBitwiseOpHandle(FhevmOperator.fheBitAnd, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheBitOr(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createBitwiseOpHandle(FhevmOperator.fheBitOr, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheBitXor(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createBitwiseOpHandle(FhevmOperator.fheBitXor, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheShl(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createBitwiseOpHandle(FhevmOperator.fheShl, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheShr(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createBitwiseOpHandle(FhevmOperator.fheShr, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheRotl(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createBitwiseOpHandle(FhevmOperator.fheRotl, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheRotr(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createBitwiseOpHandle(FhevmOperator.fheRotr, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheEq(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createCompareOpHandle(FhevmOperator.fheEq, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheNe(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createCompareOpHandle(FhevmOperator.fheNe, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheGe(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createCompareOpHandle(FhevmOperator.fheGe, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheGt(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createCompareOpHandle(FhevmOperator.fheGt, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheLe(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createCompareOpHandle(FhevmOperator.fheLe, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
    fheLt(lhsBytes32Hex, rhsBytes32Hex, scalar) {
        return createCompareOpHandle(FhevmOperator.fheLt, lhsBytes32Hex, rhsBytes32Hex, scalar, __classPrivateFieldGet(this, _FhevmHandleCoder_aclAddress, "f"), __classPrivateFieldGet(this, _FhevmHandleCoder_chainId, "f"));
    }
}
_FhevmHandleCoder_aclAddress = new WeakMap(), _FhevmHandleCoder_chainId = new WeakMap();
/*
    function _appendMetadataToPrehandle(
        bytes32 prehandle,
        FheType handleType
    ) internal view virtual returns (bytes32 result) {
        /// @dev Clear bytes 21-31.
        result = prehandle & 0xffffffffffffffffffffffffffffffffffffffffff0000000000000000000000;
        /// @dev Set byte 21 to 0xff since the new handle comes from computation.
        result = result | (bytes32(uint256(0xff)) << 80);
        /// @dev chainId is cast to uint64 first to make sure it does not take more than 8 bytes before shifting.
        /// If EIP2294 gets approved, it will force the chainID's size to be lower than MAX_UINT64.
        result = result | (bytes32(uint256(uint64(block.chainid))) << 16);
        /// @dev Insert handleType into byte 30.
        result = result | (bytes32(uint256(uint8(handleType))) << 8);
        /// @dev Insert HANDLE_VERSION into byte 31.
        result = result | bytes32(uint256(HANDLE_VERSION));
    }

*/
function _appendMetadataToPrehandle(prehandle, handleType, chainId) {
    let result = prehandle & 0xffffffffffffffffffffffffffffffffffffffffff0000000000000000000000n;
    result = result | (0xffn << 80n);
    result = result | (chainId << 16n);
    result = result | (BigInt(handleType) << 8n);
    result = result | BigInt(constants.FHEVM_HANDLE_VERSION);
    return result;
}
export function createBinaryOpHandle(op, lhs, rhs, scalar, type, aclAddress, chainId) {
    if (typeof scalar === "boolean") {
        scalar = scalar ? "0x01" : "0x00";
    }
    const enc = EthersT.solidityPacked(["uint8", "bytes32", "bytes32", "bytes1", "address", "uint256"], [op, lhs, rhs, scalar, aclAddress, chainId]);
    const prehandle = BigInt(EthersT.keccak256(enc));
    return EthersT.toBeHex(_appendMetadataToPrehandle(prehandle, type, BigInt(chainId)));
}
export function createNumericalOpHandle(op, lhs, rhs, scalar, aclAddress, chainId) {
    const handleLhs = FhevmHandle.fromBytes32Hex(lhs);
    return createBinaryOpHandle(op, lhs, rhs, scalar, handleLhs.fheType, aclAddress, chainId);
}
export function createBitwiseOpHandle(op, lhs, rhs, scalar, aclAddress, chainId) {
    const handleLhs = FhevmHandle.fromBytes32Hex(lhs);
    return createBinaryOpHandle(op, lhs, rhs, scalar, handleLhs.fheType, aclAddress, chainId);
}
export function createCompareOpHandle(op, lhs, rhs, scalar, aclAddress, chainId) {
    return createBinaryOpHandle(op, lhs, rhs, scalar, FheType.Bool, aclAddress, chainId);
}
//# sourceMappingURL=FhevmHandleCoder.js.map