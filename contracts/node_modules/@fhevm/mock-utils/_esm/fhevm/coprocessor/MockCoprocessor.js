var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MockCoprocessor_iterator, _MockCoprocessor_handler, _MockCoprocessor_db, _MockCoprocessor_coprocessorSigners, _MockCoprocessor_inputVerifier;
import { ethers as EthersT } from "ethers";
import { multiSignEIP712 } from "../../ethers/eip712.js";
import { assertIsBytes32String } from "../../utils/bytes.js";
import { assertFhevm } from "../../utils/error.js";
import { removePrefix } from "../../utils/string.js";
import { InputVerifier } from "../contracts/InputVerifier.js";
import { FHEVMExecutorPartialInterface } from "../contracts/interfaces/FHEVMExecutor.itf.js";
import { CoprocessorEventsHandler } from "./CoprocessorEventsHandler.js";
import { CoprocessorEventsIterator } from "./CoprocessorEventsIterator.js";
export class MockCoprocessor {
    constructor() {
        _MockCoprocessor_iterator.set(this, void 0);
        _MockCoprocessor_handler.set(this, void 0);
        _MockCoprocessor_db.set(this, void 0);
        _MockCoprocessor_coprocessorSigners.set(this, void 0);
        _MockCoprocessor_inputVerifier.set(this, void 0);
    }
    static async create(readonlyProvider, params) {
        const mc = new MockCoprocessor();
        const coprocessorItf = params.coprocessorContractInterface ?? FHEVMExecutorPartialInterface;
        __classPrivateFieldSet(mc, _MockCoprocessor_iterator, new CoprocessorEventsIterator(coprocessorItf, params.coprocessorContractAddress, readonlyProvider, params.db.fromBlockNumber), "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_handler, new CoprocessorEventsHandler(params.db), "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_db, params.db, "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_inputVerifier, await InputVerifier.create(readonlyProvider, params.inputVerifierContractAddress), "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_coprocessorSigners, params.coprocessorSigners, "f");
        return mc;
    }
    getDB() {
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        return __classPrivateFieldGet(this, _MockCoprocessor_db, "f");
    }
    async awaitCoprocessor() {
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_iterator, "f") !== undefined, `MockCoprocessor not initialized`);
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_handler, "f") !== undefined, `MockCoprocessor not initialized`);
        // Warning test: solidityCoverageRunning
        const events = await __classPrivateFieldGet(this, _MockCoprocessor_iterator, "f").next();
        for (let i = 0; i < events.length; ++i) {
            await __classPrivateFieldGet(this, _MockCoprocessor_handler, "f").handleEvent(events[i]);
        }
    }
    async clearHandleDB() {
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        // Call awaitCoprocessor() to flush yet unprocessed events
        // This is critical otherwise we might have to process input handles that are
        // no more in the db. This is a scenario that randomly occurs between 2 reset
        // usually when running tests.
        await this.awaitCoprocessor();
        await __classPrivateFieldGet(this, _MockCoprocessor_db, "f").reset();
    }
    async handleEvmRevert(newBlockNumber) {
        console.log("HANDLE REVERT HERE!! " + newBlockNumber);
    }
    async insertHandleBytes32(handleBytes32Hex, clearTextHex, metadata) {
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        await __classPrivateFieldGet(this, _MockCoprocessor_db, "f").insertHandleBytes32(handleBytes32Hex, clearTextHex, metadata);
    }
    async queryHandlesBytes32AsHex(handlesBytes32) {
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        await this.awaitCoprocessor();
        const clearTextHexList = [];
        for (let i = 0; i < handlesBytes32.length; ++i) {
            assertIsBytes32String(handlesBytes32[i]);
            let clearTextHex;
            try {
                clearTextHex = (await __classPrivateFieldGet(this, _MockCoprocessor_db, "f").queryHandleBytes32(handlesBytes32[i])).clearTextHex;
            }
            catch {
                clearTextHex = "0x";
            }
            clearTextHexList.push(clearTextHex);
        }
        return clearTextHexList;
    }
    async computeCoprocessorSignatures(handlesBytes32List, contractChainId, contractAddress, userAddress, extraData) {
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_inputVerifier, "f") !== undefined, `MockCoprocessor not initialized`);
        assertFhevm(__classPrivateFieldGet(this, _MockCoprocessor_coprocessorSigners, "f") !== undefined, `MockCoprocessor not initialized`);
        const numHandles = handlesBytes32List.length;
        const handlesBytes32HexNoPrefixList = [];
        const handlesBytes32HexList = [];
        for (let index = 0; index < numHandles; ++index) {
            const handleBytes32Hex = EthersT.hexlify(handlesBytes32List[index]);
            handlesBytes32HexList.push(handleBytes32Hex);
            handlesBytes32HexNoPrefixList.push(removePrefix(handleBytes32Hex, "0x"));
        }
        const eip712 = __classPrivateFieldGet(this, _MockCoprocessor_inputVerifier, "f").createCiphertextVerificationEIP712(handlesBytes32HexList, contractChainId, contractAddress, userAddress, extraData);
        const signaturesHex = await multiSignEIP712(__classPrivateFieldGet(this, _MockCoprocessor_coprocessorSigners, "f"), eip712.domain, eip712.types, eip712.message);
        // Remove 0x prefix
        const signatureHexNoPrefixList = signaturesHex.map((sigHex) => removePrefix(sigHex, "0x"));
        return {
            handles: handlesBytes32HexNoPrefixList,
            signatures: signatureHexNoPrefixList,
        };
    }
}
_MockCoprocessor_iterator = new WeakMap(), _MockCoprocessor_handler = new WeakMap(), _MockCoprocessor_db = new WeakMap(), _MockCoprocessor_coprocessorSigners = new WeakMap(), _MockCoprocessor_inputVerifier = new WeakMap();
//# sourceMappingURL=MockCoprocessor.js.map