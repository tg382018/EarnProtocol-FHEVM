var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FhevmContractWrapper_name;
import { ethers as EthersT } from "ethers";
import constants from "../../constants.js";
export class FhevmContractWrapper {
    constructor(name) {
        _FhevmContractWrapper_name.set(this, void 0);
        __classPrivateFieldSet(this, _FhevmContractWrapper_name, name, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _FhevmContractWrapper_name, "f");
    }
    get properties() {
        return {
            address: this.address,
            contract: this.readonlyContract,
            package: this.package,
            contractName: this.name,
        };
    }
    async _callOrThrow(p, funcName) {
        try {
            return await p;
        }
        catch (e) {
            console.error(`invalid deployed ${this.name} contact at ${this.address}. Function ${funcName} does not exist.`);
            throw e;
        }
    }
}
_FhevmContractWrapper_name = new WeakMap();
export class FhevmCoprocessorContractWrapper extends FhevmContractWrapper {
    constructor(name) {
        super(name);
    }
    get package() {
        return constants.FHEVM_CORE_CONTRACTS_PACKAGE_NAME;
    }
}
export class FhevmDecryptionOracleContractWrapper extends FhevmContractWrapper {
    constructor(name) {
        super(name);
    }
    get package() {
        return constants.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE_NAME;
    }
}
//# sourceMappingURL=FhevmContractWrapper.js.map