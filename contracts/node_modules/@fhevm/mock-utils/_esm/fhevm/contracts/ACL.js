var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ACL_aclReadOnlyContract, _ACL_aclContractAddress, _ACL_fhevmExecutorAddress, _ACL_version;
import { ethers as EthersT } from "ethers";
import { assertIsAddress } from "../../utils/address.js";
import { FhevmError, assertFhevm } from "../../utils/error.js";
import { assertIsString } from "../../utils/string.js";
import { FhevmCoprocessorContractWrapper } from "./FhevmContractWrapper.js";
import { ACLPartialInterface } from "./interfaces/ACL.itf.js";
// Shareable
export class ACL extends FhevmCoprocessorContractWrapper {
    constructor() {
        super("ACL");
        _ACL_aclReadOnlyContract.set(this, void 0);
        _ACL_aclContractAddress.set(this, void 0);
        _ACL_fhevmExecutorAddress.set(this, void 0);
        _ACL_version.set(this, void 0);
    }
    static async create(runner, aclContractAddress, abi, properties) {
        assertIsAddress(aclContractAddress, "aclContractAddress");
        const acl = new ACL();
        __classPrivateFieldSet(acl, _ACL_aclContractAddress, aclContractAddress, "f");
        __classPrivateFieldSet(acl, _ACL_aclReadOnlyContract, new EthersT.Contract(aclContractAddress, abi ?? ACLPartialInterface, runner), "f");
        __classPrivateFieldSet(acl, _ACL_fhevmExecutorAddress, properties?.fhevmExecutorAddress, "f");
        __classPrivateFieldSet(acl, _ACL_version, properties?.version, "f");
        await acl._initialize();
        return acl;
    }
    get readonlyContract() {
        assertFhevm(__classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f") !== undefined, `ACL wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f");
    }
    get interface() {
        assertFhevm(__classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f") !== undefined, `ACL wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").interface;
    }
    get address() {
        assertFhevm(__classPrivateFieldGet(this, _ACL_aclContractAddress, "f") !== undefined, `ACL wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _ACL_aclContractAddress, "f");
    }
    get version() {
        assertFhevm(__classPrivateFieldGet(this, _ACL_version, "f") !== undefined, `ACL wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _ACL_version, "f");
    }
    get fhevmExecutorAddress() {
        assertFhevm(__classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f") !== undefined, `ACL wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f");
    }
    async _initialize() {
        assertFhevm(__classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f") !== undefined, `ACL wrapper is not yet initialized`);
        if (!__classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f")) {
            __classPrivateFieldSet(this, _ACL_fhevmExecutorAddress, await __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").getFHEVMExecutorAddress(), "f");
        }
        assertIsAddress(__classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f"), "fhemExecutorAddress");
        if (!__classPrivateFieldGet(this, _ACL_version, "f")) {
            __classPrivateFieldSet(this, _ACL_version, await __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").getVersion(), "f");
        }
        assertIsString(__classPrivateFieldGet(this, _ACL_version, "f"), "version");
    }
    async checkIsAllowedForDecryption(handlesBytes32Hex, readonlyProvider) {
        assertFhevm(__classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f") !== undefined, `ACL wrapper is not yet initialized`);
        const c = __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").connect(readonlyProvider);
        const isAllowedForDec = await Promise.all(handlesBytes32Hex.map(async (handleBytes32Hex) => c.isAllowedForDecryption(handleBytes32Hex)));
        for (let i = 0; i < isAllowedForDec.length; ++i) {
            if (!isAllowedForDec[i]) {
                throw new FhevmError(`Handle ${handlesBytes32Hex[i]} is not authorized for decryption`);
            }
        }
    }
}
_ACL_aclReadOnlyContract = new WeakMap(), _ACL_aclContractAddress = new WeakMap(), _ACL_fhevmExecutorAddress = new WeakMap(), _ACL_version = new WeakMap();
//# sourceMappingURL=ACL.js.map