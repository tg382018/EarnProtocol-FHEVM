"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestRelayerV1InputProof = requestRelayerV1InputProof;
exports.requestRelayerV1UserDecrypt = requestRelayerV1UserDecrypt;
exports.requestRelayerV1PublicDecrypt = requestRelayerV1PublicDecrypt;
exports.requestRelayerMetadata = requestRelayerMetadata;
exports.requestFhevmAwaitDecryptionOracle = requestFhevmAwaitDecryptionOracle;
exports.requestFhevmGetClearText = requestFhevmGetClearText;
exports.requestFhevmCreateDecryptionSignatures = requestFhevmCreateDecryptionSignatures;
const provider_js_1 = require("../../ethers/provider.js");
const methods_js_1 = require("./methods.js");
const mock_payloads_js_1 = require("./mock_payloads.js");
const payloads_js_1 = require("./payloads.js");
async function requestRelayerV1InputProof(relayerProvider, payload) {
    (0, mock_payloads_js_1.assertIsMockRelayerV1InputProofPayload)(payload);
    const response = await (0, provider_js_1.minimalProviderSend)(relayerProvider, methods_js_1.RELAYER_V1_INPUT_PROOF, [payload]);
    (0, payloads_js_1.assertIsRelayerV1InputProofResponse)(response);
    return response;
}
async function requestRelayerV1UserDecrypt(relayerProvider, payload) {
    (0, payloads_js_1.assertIsRelayerV1UserDecryptPayload)(payload);
    const response = await (0, provider_js_1.minimalProviderSend)(relayerProvider, methods_js_1.RELAYER_V1_USER_DECRYPT, [payload]);
    (0, payloads_js_1.assertIsRelayerV1UserDecryptResponse)(response);
    return { response: [response] };
}
async function requestRelayerV1PublicDecrypt(relayerProvider, payload) {
    (0, payloads_js_1.assertIsRelayerV1PublicDecryptPayload)(payload);
    const response = await (0, provider_js_1.minimalProviderSend)(relayerProvider, methods_js_1.RELAYER_V1_PUBLIC_DECRYPT, [payload]);
    (0, payloads_js_1.assertIsRelayerV1PublicDecryptResponse)(response);
    return { response: [response] };
}
async function requestRelayerMetadata(relayerProvider) {
    const response = await (0, provider_js_1.minimalProviderSend)(relayerProvider, methods_js_1.RELAYER_METADATA, []);
    (0, payloads_js_1.assertIsRelayerMetadata)(response);
    return response;
}
async function requestFhevmAwaitDecryptionOracle(relayerProvider) {
    return await (0, provider_js_1.minimalProviderSend)(relayerProvider, methods_js_1.FHEVM_AWAIT_DECRYPTION_ORACLE, []);
}
async function requestFhevmGetClearText(relayerProvider, payload) {
    return await (0, provider_js_1.minimalProviderSend)(relayerProvider, methods_js_1.FHEVM_GET_CLEAR_TEXT, [payload]);
}
async function requestFhevmCreateDecryptionSignatures(relayerProvider, payload) {
    return await (0, provider_js_1.minimalProviderSend)(relayerProvider, methods_js_1.FHEVM_CREATE_DECRYPTION_SIGNATURES, [payload]);
}
//# sourceMappingURL=MockRelayer.js.map