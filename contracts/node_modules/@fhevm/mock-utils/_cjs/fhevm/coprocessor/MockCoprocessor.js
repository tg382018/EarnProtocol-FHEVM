"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MockCoprocessor_iterator, _MockCoprocessor_handler, _MockCoprocessor_db, _MockCoprocessor_coprocessorSigners, _MockCoprocessor_inputVerifier;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockCoprocessor = void 0;
const ethers_1 = require("ethers");
const eip712_js_1 = require("../../ethers/eip712.js");
const bytes_js_1 = require("../../utils/bytes.js");
const error_js_1 = require("../../utils/error.js");
const string_js_1 = require("../../utils/string.js");
const InputVerifier_js_1 = require("../contracts/InputVerifier.js");
const FHEVMExecutor_itf_js_1 = require("../contracts/interfaces/FHEVMExecutor.itf.js");
const CoprocessorEventsHandler_js_1 = require("./CoprocessorEventsHandler.js");
const CoprocessorEventsIterator_js_1 = require("./CoprocessorEventsIterator.js");
class MockCoprocessor {
    constructor() {
        _MockCoprocessor_iterator.set(this, void 0);
        _MockCoprocessor_handler.set(this, void 0);
        _MockCoprocessor_db.set(this, void 0);
        _MockCoprocessor_coprocessorSigners.set(this, void 0);
        _MockCoprocessor_inputVerifier.set(this, void 0);
    }
    static async create(readonlyProvider, params) {
        const mc = new MockCoprocessor();
        const coprocessorItf = params.coprocessorContractInterface ?? FHEVMExecutor_itf_js_1.FHEVMExecutorPartialInterface;
        __classPrivateFieldSet(mc, _MockCoprocessor_iterator, new CoprocessorEventsIterator_js_1.CoprocessorEventsIterator(coprocessorItf, params.coprocessorContractAddress, readonlyProvider, params.db.fromBlockNumber), "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_handler, new CoprocessorEventsHandler_js_1.CoprocessorEventsHandler(params.db), "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_db, params.db, "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_inputVerifier, await InputVerifier_js_1.InputVerifier.create(readonlyProvider, params.inputVerifierContractAddress), "f");
        __classPrivateFieldSet(mc, _MockCoprocessor_coprocessorSigners, params.coprocessorSigners, "f");
        return mc;
    }
    getDB() {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        return __classPrivateFieldGet(this, _MockCoprocessor_db, "f");
    }
    async awaitCoprocessor() {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_iterator, "f") !== undefined, `MockCoprocessor not initialized`);
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_handler, "f") !== undefined, `MockCoprocessor not initialized`);
        const events = await __classPrivateFieldGet(this, _MockCoprocessor_iterator, "f").next();
        for (let i = 0; i < events.length; ++i) {
            await __classPrivateFieldGet(this, _MockCoprocessor_handler, "f").handleEvent(events[i]);
        }
    }
    async clearHandleDB() {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        await this.awaitCoprocessor();
        await __classPrivateFieldGet(this, _MockCoprocessor_db, "f").reset();
    }
    async handleEvmRevert(newBlockNumber) {
        console.log("HANDLE REVERT HERE!! " + newBlockNumber);
    }
    async insertHandleBytes32(handleBytes32Hex, clearTextHex, metadata) {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        await __classPrivateFieldGet(this, _MockCoprocessor_db, "f").insertHandleBytes32(handleBytes32Hex, clearTextHex, metadata);
    }
    async queryHandlesBytes32AsHex(handlesBytes32) {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_db, "f") !== undefined, `MockCoprocessor not initialized`);
        await this.awaitCoprocessor();
        const clearTextHexList = [];
        for (let i = 0; i < handlesBytes32.length; ++i) {
            (0, bytes_js_1.assertIsBytes32String)(handlesBytes32[i]);
            let clearTextHex;
            try {
                clearTextHex = (await __classPrivateFieldGet(this, _MockCoprocessor_db, "f").queryHandleBytes32(handlesBytes32[i])).clearTextHex;
            }
            catch {
                clearTextHex = "0x";
            }
            clearTextHexList.push(clearTextHex);
        }
        return clearTextHexList;
    }
    async computeCoprocessorSignatures(handlesBytes32List, contractChainId, contractAddress, userAddress, extraData) {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_inputVerifier, "f") !== undefined, `MockCoprocessor not initialized`);
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _MockCoprocessor_coprocessorSigners, "f") !== undefined, `MockCoprocessor not initialized`);
        const numHandles = handlesBytes32List.length;
        const handlesBytes32HexNoPrefixList = [];
        const handlesBytes32HexList = [];
        for (let index = 0; index < numHandles; ++index) {
            const handleBytes32Hex = ethers_1.ethers.hexlify(handlesBytes32List[index]);
            handlesBytes32HexList.push(handleBytes32Hex);
            handlesBytes32HexNoPrefixList.push((0, string_js_1.removePrefix)(handleBytes32Hex, "0x"));
        }
        const eip712 = __classPrivateFieldGet(this, _MockCoprocessor_inputVerifier, "f").createCiphertextVerificationEIP712(handlesBytes32HexList, contractChainId, contractAddress, userAddress, extraData);
        const signaturesHex = await (0, eip712_js_1.multiSignEIP712)(__classPrivateFieldGet(this, _MockCoprocessor_coprocessorSigners, "f"), eip712.domain, eip712.types, eip712.message);
        const signatureHexNoPrefixList = signaturesHex.map((sigHex) => (0, string_js_1.removePrefix)(sigHex, "0x"));
        return {
            handles: handlesBytes32HexNoPrefixList,
            signatures: signatureHexNoPrefixList,
        };
    }
}
exports.MockCoprocessor = MockCoprocessor;
_MockCoprocessor_iterator = new WeakMap(), _MockCoprocessor_handler = new WeakMap(), _MockCoprocessor_db = new WeakMap(), _MockCoprocessor_coprocessorSigners = new WeakMap(), _MockCoprocessor_inputVerifier = new WeakMap();
//# sourceMappingURL=MockCoprocessor.js.map