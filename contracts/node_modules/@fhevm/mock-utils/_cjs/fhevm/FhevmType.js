"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.allFhevmTypeInfos = exports.allFhevmTypeNames = exports.allFhevmTypes = exports.FhevmTypeNameMap = exports.FhevmTypeMap = exports.FhevmType = void 0;
exports.isFhevmType = isFhevmType;
exports.isFhevmEbytes = isFhevmEbytes;
exports.isFhevmEuint = isFhevmEuint;
exports.isFhevmEbool = isFhevmEbool;
exports.isFhevmEaddress = isFhevmEaddress;
exports.checkFhevmType = checkFhevmType;
exports.FheTypeToFhevmType = FheTypeToFhevmType;
exports.FhevmTypeToFheType = FhevmTypeToFheType;
exports.getFhevmTypeInfo = getFhevmTypeInfo;
exports.getFhevmTypeFheBitLength = getFhevmTypeFheBitLength;
exports.getFhevmTypeMaxClearTextBigInt = getFhevmTypeMaxClearTextBigInt;
exports.tryParseFhevmType = tryParseFhevmType;
const error_js_1 = require("../utils/error.js");
const math_js_1 = require("../utils/math.js");
const FheType_js_1 = require("./FheType.js");
var FhevmType;
(function (FhevmType) {
    FhevmType[FhevmType["ebool"] = 0] = "ebool";
    FhevmType[FhevmType["euint4"] = 1] = "euint4";
    FhevmType[FhevmType["euint8"] = 2] = "euint8";
    FhevmType[FhevmType["euint16"] = 3] = "euint16";
    FhevmType[FhevmType["euint32"] = 4] = "euint32";
    FhevmType[FhevmType["euint64"] = 5] = "euint64";
    FhevmType[FhevmType["euint128"] = 6] = "euint128";
    FhevmType[FhevmType["eaddress"] = 7] = "eaddress";
    FhevmType[FhevmType["euint256"] = 8] = "euint256";
    FhevmType[FhevmType["ebytes64"] = 9] = "ebytes64";
    FhevmType[FhevmType["ebytes128"] = 10] = "ebytes128";
    FhevmType[FhevmType["ebytes256"] = 11] = "ebytes256";
})(FhevmType || (exports.FhevmType = FhevmType = {}));
exports.FhevmTypeMap = {
    ebool: FhevmType.ebool,
    euint4: FhevmType.euint4,
    euint8: FhevmType.euint8,
    euint16: FhevmType.euint16,
    euint32: FhevmType.euint32,
    euint64: FhevmType.euint64,
    euint128: FhevmType.euint128,
    eaddress: FhevmType.eaddress,
    euint256: FhevmType.euint256,
    ebytes64: FhevmType.ebytes64,
    ebytes128: FhevmType.ebytes128,
    ebytes256: FhevmType.ebytes256,
};
Object.freeze(exports.FhevmTypeMap);
exports.FhevmTypeNameMap = {
    [FhevmType.ebool]: "ebool",
    [FhevmType.euint4]: "euint4",
    [FhevmType.euint8]: "euint8",
    [FhevmType.euint16]: "euint16",
    [FhevmType.euint32]: "euint32",
    [FhevmType.euint64]: "euint64",
    [FhevmType.euint128]: "euint128",
    [FhevmType.euint256]: "euint256",
    [FhevmType.eaddress]: "eaddress",
    [FhevmType.ebytes64]: "ebytes64",
    [FhevmType.ebytes128]: "ebytes128",
    [FhevmType.ebytes256]: "ebytes256",
};
Object.freeze(exports.FhevmTypeNameMap);
exports.allFhevmTypes = [
    FhevmType.ebool,
    FhevmType.euint4,
    FhevmType.euint8,
    FhevmType.euint16,
    FhevmType.euint32,
    FhevmType.euint64,
    FhevmType.euint128,
    FhevmType.eaddress,
    FhevmType.euint256,
    FhevmType.ebytes64,
    FhevmType.ebytes128,
    FhevmType.ebytes256,
];
Object.freeze(exports.allFhevmTypes);
exports.allFhevmTypeNames = [
    "ebool",
    "euint4",
    "euint8",
    "euint16",
    "euint32",
    "euint64",
    "euint128",
    "eaddress",
    "euint256",
    "ebytes64",
    "ebytes128",
    "ebytes256",
];
Object.freeze(exports.allFhevmTypeNames);
exports.allFhevmTypeInfos = Object.freeze([
    Object.freeze({
        type: FhevmType.ebool,
        fheType: FheType_js_1.FheType.Bool,
        name: "ebool",
        solidityTypeName: "bool",
        clearTextBitLength: 1,
    }),
    Object.freeze({
        type: FhevmType.euint4,
        fheType: FheType_js_1.FheType.Uint4,
        name: "euint4",
        solidityTypeName: "uint4",
        clearTextBitLength: 4,
    }),
    Object.freeze({
        type: FhevmType.euint8,
        fheType: FheType_js_1.FheType.Uint8,
        name: "euint8",
        solidityTypeName: "uint8",
        clearTextBitLength: 8,
    }),
    Object.freeze({
        type: FhevmType.euint16,
        fheType: FheType_js_1.FheType.Uint16,
        name: "euint16",
        solidityTypeName: "uint16",
        clearTextBitLength: 16,
    }),
    Object.freeze({
        type: FhevmType.euint32,
        fheType: FheType_js_1.FheType.Uint32,
        name: "euint32",
        solidityTypeName: "uint32",
        clearTextBitLength: 32,
    }),
    Object.freeze({
        type: FhevmType.euint64,
        fheType: FheType_js_1.FheType.Uint64,
        name: "euint64",
        solidityTypeName: "uint64",
        clearTextBitLength: 64,
    }),
    Object.freeze({
        name: "euint128",
        type: FhevmType.euint128,
        fheType: FheType_js_1.FheType.Uint128,
        solidityTypeName: "uint128",
        clearTextBitLength: 128,
    }),
    Object.freeze({
        name: "eaddress",
        type: FhevmType.eaddress,
        fheType: FheType_js_1.FheType.Uint160,
        solidityTypeName: "address",
        clearTextBitLength: 160,
    }),
    Object.freeze({
        name: "euint256",
        type: FhevmType.euint256,
        fheType: FheType_js_1.FheType.Uint256,
        solidityTypeName: "uint256",
        clearTextBitLength: 256,
    }),
    Object.freeze({
        name: "ebytes64",
        type: FhevmType.ebytes64,
        fheType: FheType_js_1.FheType.Uint512,
        solidityTypeName: "bytes",
        clearTextBitLength: 512,
    }),
    Object.freeze({
        name: "ebytes128",
        type: FhevmType.ebytes128,
        fheType: FheType_js_1.FheType.Uint1024,
        solidityTypeName: "bytes",
        clearTextBitLength: 1024,
    }),
    Object.freeze({
        name: "ebytes256",
        type: FhevmType.ebytes256,
        fheType: FheType_js_1.FheType.Uint2048,
        solidityTypeName: "bytes",
        clearTextBitLength: 2048,
    }),
]);
function isFhevmType(fhevmType) {
    if (!(0, math_js_1.isUInt)(fhevmType)) {
        return false;
    }
    const theFhevmType = fhevmType;
    if (theFhevmType >= exports.allFhevmTypeInfos.length) {
        return false;
    }
    return true;
}
function isFhevmEbytes(fhevmType) {
    return fhevmType === FhevmType.ebytes64 || fhevmType === FhevmType.ebytes128 || fhevmType === FhevmType.ebytes256;
}
function isFhevmEuint(fhevmType) {
    return (fhevmType === FhevmType.euint4 ||
        fhevmType === FhevmType.euint8 ||
        fhevmType === FhevmType.euint16 ||
        fhevmType === FhevmType.euint32 ||
        fhevmType === FhevmType.euint64 ||
        fhevmType === FhevmType.euint128 ||
        fhevmType === FhevmType.euint256);
}
function isFhevmEbool(fhevmType) {
    return fhevmType === FhevmType.ebool;
}
function isFhevmEaddress(fhevmType) {
    return fhevmType === FhevmType.eaddress;
}
function checkFhevmType(fhevmType) {
    if (!isFhevmType(fhevmType)) {
        throw new error_js_1.FhevmError(`Invalid FhevmType ${fhevmType}`);
    }
}
function FheTypeToFhevmType(fheType) {
    (0, FheType_js_1.checkFheType)(fheType);
    if (fheType >= exports.allFhevmTypeInfos.length) {
        throw new error_js_1.FhevmError(`Cannot convert FheType ${fheType} to FhevmType`);
    }
    return fheType;
}
function FhevmTypeToFheType(fhevmType) {
    checkFhevmType(fhevmType);
    if (fhevmType >= FheType_js_1.ALL_FHE_TYPES.length) {
        throw new error_js_1.FhevmError(`Cannot convert FhevmType: ${fhevmType} to FheType`);
    }
    return fhevmType;
}
function getFhevmTypeInfo(type) {
    if (typeof type === "string") {
        return exports.allFhevmTypeInfos[exports.FhevmTypeMap[type]];
    }
    return exports.allFhevmTypeInfos[type];
}
function getFhevmTypeFheBitLength(fhevmType) {
    const fheType = FhevmTypeToFheType(fhevmType);
    return (0, FheType_js_1.getFheTypeBitLength)(fheType);
}
function getFhevmTypeMaxClearTextBigInt(fhevmType) {
    const fhevmTypeInfo = getFhevmTypeInfo(fhevmType);
    const clearTextBitLen = fhevmTypeInfo.clearTextBitLength;
    return (0, math_js_1.getMaxBigInt)(clearTextBitLen);
}
function tryParseFhevmType(name) {
    if (typeof name !== "string") {
        return undefined;
    }
    if (!(name in exports.FhevmTypeMap)) {
        return undefined;
    }
    try {
        return exports.FhevmTypeMap[name];
    }
    catch {
        return undefined;
    }
}
//# sourceMappingURL=FhevmType.js.map