"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsAddress = assertIsAddress;
exports.assertIsAddressArray = assertIsAddressArray;
exports.assertIsAddressProperty = assertIsAddressProperty;
exports.addressToBytes = addressToBytes;
exports.addressesInAddressList = addressesInAddressList;
const ethers_1 = require("ethers");
const error_js_1 = require("./error.js");
const string_js_1 = require("./string.js");
function assertIsAddress(value, valueName) {
    (0, string_js_1.assertIsString)(value, valueName);
    (0, error_js_1.assertFhevm)(ethers_1.ethers.isAddress(value), `${valueName ?? "value"}: '${value}' is not a valid address`);
}
function assertIsAddressArray(value, valueName) {
    (0, error_js_1.assertIsArray)(value, valueName);
    for (let i = 0; i < value.length; ++i) {
        assertIsAddress(value[i], valueName ? `${valueName}[${i}]` : undefined);
    }
}
function assertIsAddressProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new error_js_1.FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        if (typeof prop !== "string") {
            throw new error_js_1.FhevmError(`Expected '${key}' in ${typeName} to be a valid address, but got ${typeof prop} instead.`);
        }
        if (!ethers_1.ethers.isAddress(prop)) {
            throw new error_js_1.FhevmError(`Expected '${key}' in ${typeName} to be a valid address, but got ${typeof prop} instead.`);
        }
    }
}
function addressToBytes(value, valueName) {
    assertIsAddress(value, valueName);
    (0, error_js_1.assertFhevm)(ethers_1.ethers.zeroPadValue(value, 20).toLocaleLowerCase() === ethers_1.ethers.toBeHex(value, 20));
    return ethers_1.ethers.getBytes(ethers_1.ethers.toBeHex(value, 20));
}
function addressesInAddressList(addresses, addressList) {
    const s = (0, string_js_1.toLowerCaseSet)(addressList);
    for (let i = 0; i < addresses.length; ++i) {
        if (!s.has(addresses[i].toLowerCase())) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=address.js.map