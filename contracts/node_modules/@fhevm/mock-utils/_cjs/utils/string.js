"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removePrefix = removePrefix;
exports.removeSuffix = removeSuffix;
exports.ensure0x = ensure0x;
exports.remove0x = remove0x;
exports.ensurePrefix = ensurePrefix;
exports.ensureSuffix = ensureSuffix;
exports.assertIsString = assertIsString;
exports.assertIsStringArray = assertIsStringArray;
exports.assertIsStringProperty = assertIsStringProperty;
exports.assertIsStringArrayProperty = assertIsStringArrayProperty;
exports.toLowerCaseSet = toLowerCaseSet;
const error_js_1 = require("./error.js");
function removePrefix(s, prefix) {
    return s.startsWith(prefix) ? s.substring(prefix.length) : s;
}
function removeSuffix(s, suffix) {
    return s.endsWith(suffix) ? s.substring(0, s.length - suffix.length) : s;
}
function ensure0x(s) {
    return !s.startsWith("0x") ? `0x${s}` : s;
}
function remove0x(s) {
    return s.startsWith("0x") ? s.substring(2) : s;
}
function ensurePrefix(s, prefix) {
    return !s.startsWith(prefix) ? prefix + s : s;
}
function ensureSuffix(s, suffix) {
    return !s.endsWith(suffix) ? s + suffix : s;
}
function assertIsString(value, valueName) {
    (0, error_js_1.assertFhevm)(typeof value === "string", `${valueName ?? "value"} is not of type string, got ${typeof value} instead`);
}
function assertIsStringArray(value, valueName) {
    if (!Array.isArray(value)) {
        throw new error_js_1.FhevmError(`${valueName ?? "value"} is not an array of string`);
    }
    for (let i = 0; i < value.length; ++i) {
        (0, error_js_1.assertFhevm)(typeof value[i] === "string", `${valueName ?? "value"}[${i}] is not of type string, got ${typeof value[i]} instead`);
    }
}
function assertIsStringProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new error_js_1.FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        if (typeof prop !== "string") {
            throw new error_js_1.FhevmError(`Expected '${key}' in ${typeName} to be a string, but got ${typeof prop} instead.`);
        }
    }
}
function assertIsStringArrayProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new error_js_1.FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        assertIsStringArray(prop, ` ${typeName}.${key}`);
    }
}
function toLowerCaseSet(array) {
    const s = new Set();
    for (let i = 0; i < array.length; ++i) {
        const item = array[i];
        if (item) {
            s.add(item.toLowerCase());
        }
    }
    return s;
}
//# sourceMappingURL=string.js.map