"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const fs = __importStar(require("fs"));
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_1 = require("hardhat/config");
const picocolors = __importStar(require("picocolors"));
const error_1 = require("../error");
const EnvironmentExtender_1 = require("../internal/EnvironmentExtender");
const constants_1 = __importDefault(require("../internal/constants"));
const error_2 = require("../internal/error");
const solidityCoverage_1 = require("../internal/utils/solidityCoverage");
const debug = (0, debug_1.default)("@fhevm/hardhat:builtin-tasks");
(0, config_1.task)(task_names_1.TASK_TEST, async (taskArgs, hre, runSuper) => {
    if (taskArgs.parallel === true && hre.network.name === "hardhat") {
        throw new error_1.HardhatFhevmError("The fhevm hardhat plugin does not support parallel testing when running in mock mode.");
    }
    await (0, solidityCoverage_1.checkSolidityCoverageSettings)(hre);
    const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
    fhevmEnv.setRunningInHHTest();
    await fhevmEnv.deploy();
    (0, error_2.assertHHFhevm)(fhevmEnv.isDeployed, "FhevmEnvironment is not initialized");
    const res = await runSuper();
    return res;
});
(0, config_1.task)(task_names_1.TASK_CLEAN, async (_taskArgs, _hre, runSuper) => {
    debug(`execute TASK_CLEAN`);
    const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
    try {
        if (fs.existsSync(fhevmEnv.paths.cacheDir)) {
            fs.rmSync(fhevmEnv.paths.cacheDir, { force: true, recursive: true });
            debug(`${picocolors.greenBright(task_names_1.TASK_CLEAN)} remove directory ${fhevmEnv.paths.cacheDir}`);
        }
        else {
            debug(`${picocolors.greenBright(task_names_1.TASK_CLEAN)} directory ${fhevmEnv.paths.cacheDir} already removed.`);
        }
    }
    catch {
        console.log(`${constants_1.default.HARDHAT_PLUGIN_NAME}: Unable to remove directory '${fhevmEnv.paths.cacheDir}'.`);
    }
    const res = await runSuper();
    return res;
});
(0, config_1.subtask)(task_names_1.TASK_COMPILE_GET_REMAPPINGS).setAction(async (_taskArgs, _hre, runSuper) => {
    debug(`execute TASK_COMPILE_GET_REMAPPINGS`);
    const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
    await fhevmEnv.minimalInit();
    const res = (await runSuper());
    const remappings = fhevmEnv.getRemappings();
    Object.entries(remappings).forEach(([k, v]) => {
        debug(`${picocolors.greenBright("remapping:")} ${k} => ${v}`);
        res[k] = v;
    });
    return res;
});
(0, config_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS).setAction(async (_taskArgs, _hre, runSuper) => {
    debug(`execute TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS`);
    const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
    await fhevmEnv.minimalInit();
    await fhevmEnv.initializeAddresses(false);
    const filePaths = await runSuper();
    const fhevmSourcePaths = fhevmEnv.getSoliditySourcePaths();
    for (let i = 0; i < fhevmSourcePaths.length; ++i) {
        filePaths.push(fhevmSourcePaths[i]);
    }
    return filePaths;
});
(0, config_1.subtask)(task_names_1.TASK_NODE_GET_PROVIDER).setAction(async (_taskArgs, _hre, runSuper) => {
    const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
    if (!fhevmEnv.isDeployed) {
        fhevmEnv.setRunningInHHNode();
        await fhevmEnv.deploy();
        (0, error_2.assertHHFhevm)(fhevmEnv.isDeployed, "FhevmEnvironment is not initialized");
    }
    const res = await runSuper();
    return res;
});
(0, config_1.subtask)(task_names_1.TASK_NODE_SERVER_READY).setAction(async (_taskArgs, _hre, runSuper) => {
    const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
    if (!fhevmEnv.isDeployed) {
        fhevmEnv.setRunningInHHNode();
        await fhevmEnv.deploy();
        (0, error_2.assertHHFhevm)(fhevmEnv.isDeployed, "FhevmEnvironment is not initialized");
    }
    const res = await runSuper();
    return res;
});
//# sourceMappingURL=builtin-tasks.js.map