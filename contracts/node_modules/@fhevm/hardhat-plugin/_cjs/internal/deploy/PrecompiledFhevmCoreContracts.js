"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrecompiledFhevmCoreContractsAddresses = getPrecompiledFhevmCoreContractsAddresses;
exports.retrievePreCompiledFHEVMExecutorAddressFromACLArtifact = retrievePreCompiledFHEVMExecutorAddressFromACLArtifact;
exports.loadPrecompiledFhevmCoreContractsAddresses = loadPrecompiledFhevmCoreContractsAddresses;
const child_process_1 = require("child_process");
const debug_1 = __importDefault(require("debug"));
const ethers_1 = require("ethers");
const fs = __importStar(require("fs"));
const picocolors = __importStar(require("picocolors"));
const error_1 = require("../../error");
const task_names_1 = require("../../task-names");
const constants_1 = __importDefault(require("../constants"));
const hh_1 = require("../utils/hh");
const debug = (0, debug_1.default)("@fhevm/hardhat:addresses");
function __logPrecompiledAddresses(addresses, useCache) {
    const prefix = !useCache ? "Resolve" : `${picocolors.yellowBright("Cache")}`;
    debug(`${prefix} precompiled ${picocolors.cyanBright("ACL")} address                  : ${addresses.ACLAddress}`);
    debug(`${prefix} precompiled ${picocolors.cyanBright("FHEVMExecutor")} address        : ${addresses.CoprocessorAddress}`);
    debug(`${prefix} precompiled ${picocolors.cyanBright("InputVerifierAddress")} address : ${addresses.InputVerifierAddress}`);
    debug(`${prefix} precompiled ${picocolors.cyanBright("HCULimitAddress")} address   : ${addresses.HCULimitAddress}`);
}
async function childProcessExecNpxHardhatFhevmInstallSolidity(alreadyRunning) {
    const cmd = `npx hardhat ${task_names_1.SCOPE_FHEVM} ${task_names_1.SCOPE_FHEVM_TASK_INSTALL_SOLIDITY} --network hardhat`;
    if (alreadyRunning) {
        throw new error_1.HardhatFhevmError(`Command '${cmd}' is already running.`);
    }
    debug(`Running command '${cmd}' ...`);
    const output = await new Promise((resolve, reject) => {
        const process = (0, child_process_1.exec)(cmd, {
            maxBuffer: 1024 * 1024 * 500,
        }, (err, stdout) => {
            if (err !== null) {
                return reject(err);
            }
            resolve(stdout);
        });
        process.stdin.end();
    });
    debug(`Command '${cmd}' completed.`);
    console.log(output);
    return output;
}
async function getPrecompiledFhevmCoreContractsAddresses(mockProvider, fhevmPaths) {
    debug(`Resolving precompiled @fhevm/core-contracts addresses using artifacts at ${fhevmPaths.resolveFhevmCoreContractsArtifactRootDir()} ...`);
    if (mockProvider.info.networkName !== "hardhat") {
        throw new error_1.HardhatFhevmError(`Can't retrieve ${constants_1.default.FHEVM_CORE_CONTRACTS_PACKAGE.name} precompiled addresses. This operation is only supported on 'hardhat' network. Current network: ${mockProvider.info.networkName}`);
    }
    const precompiledFHEVMExecutorAddress = await retrievePreCompiledFHEVMExecutorAddressFromACLArtifact(mockProvider, fhevmPaths);
    try {
        const FHEVMExecutorArtifact = await fhevmPaths.getFhevmCoreContractsArtifact("FHEVMExecutor");
        const FHEVMExecutorBytecode = FHEVMExecutorArtifact.artifact.deployedBytecode;
        await mockProvider.setCodeAt(precompiledFHEVMExecutorAddress, FHEVMExecutorBytecode);
        const FHEVMExecutorReadOnly = new ethers_1.ethers.Contract(precompiledFHEVMExecutorAddress, FHEVMExecutorArtifact.artifact.abi, mockProvider.readonlyEthersProvider);
        const precompiledACLAddress = (await FHEVMExecutorReadOnly.getACLAddress());
        const precompiledHCULimitAddress = (await FHEVMExecutorReadOnly.getHCULimitAddress());
        const precompiledInputVerifierAddress = (await FHEVMExecutorReadOnly.getInputVerifierAddress());
        const addresses = {
            ACLAddress: precompiledACLAddress,
            CoprocessorAddress: precompiledFHEVMExecutorAddress,
            HCULimitAddress: precompiledHCULimitAddress,
            InputVerifierAddress: precompiledInputVerifierAddress,
        };
        __logPrecompiledAddresses(addresses, false);
        return addresses;
    }
    finally {
        await mockProvider.setCodeAt(precompiledFHEVMExecutorAddress, "0x");
    }
}
async function retrievePreCompiledFHEVMExecutorAddressFromACLArtifact(mockProvider, fhevmPaths) {
    const DUMMY_ACL_ADDR = (0, hh_1.computeDummyAddress)();
    if ((await mockProvider.getCodeAt(DUMMY_ACL_ADDR)) !== "0x") {
        throw new error_1.HardhatFhevmError("Unable to determine precompiled FHEVMExecutor address.");
    }
    try {
        const aclArtifact = await fhevmPaths.getFhevmCoreContractsArtifact("ACL");
        const aclBytecode = aclArtifact.artifact.deployedBytecode;
        await mockProvider.setCodeAt(DUMMY_ACL_ADDR, aclBytecode);
        const dummyAcl = new ethers_1.ethers.Contract(DUMMY_ACL_ADDR, aclArtifact.artifact.abi, mockProvider.readonlyEthersProvider);
        const precompiledFHEVMExecutorAddress = await dummyAcl.getFHEVMExecutorAddress();
        return precompiledFHEVMExecutorAddress;
    }
    finally {
        await mockProvider.setCodeAt(DUMMY_ACL_ADDR, "0x");
    }
}
async function loadPrecompiledFhevmCoreContractsAddresses(mockProvider, fhevmPaths, ignoreCache, isRunningInHHFHEVMInstallSolidity) {
    const jsonPath = fhevmPaths.cachePrecompiledFhevmCoreContractsAddressesJson;
    if (fs.existsSync(jsonPath)) {
        if (ignoreCache) {
            debug(`Remove cache file ${jsonPath}.`);
            fs.rmSync(jsonPath);
        }
    }
    if (mockProvider.info.networkName !== "hardhat") {
        if (!fs.existsSync(jsonPath)) {
            await childProcessExecNpxHardhatFhevmInstallSolidity(isRunningInHHFHEVMInstallSolidity);
            if (!fs.existsSync(jsonPath)) {
                throw new error_1.HardhatFhevmError(`Unable to generated ${jsonPath}`);
            }
        }
    }
    if (fs.existsSync(jsonPath)) {
        debug(`Skip precompiled @fhevm/core-contracts addresses resolution. Cache file ${jsonPath} already exists.`);
        const str = fs.readFileSync(jsonPath, "utf8");
        const o = JSON.parse(str);
        __logPrecompiledAddresses(o, true);
        return {
            ACLAddress: o.ACLAddress,
            CoprocessorAddress: o.CoprocessorAddress,
            HCULimitAddress: o.HCULimitAddress,
            InputVerifierAddress: o.InputVerifierAddress,
        };
    }
    const addresses = await getPrecompiledFhevmCoreContractsAddresses(mockProvider, fhevmPaths);
    if (!fs.existsSync(fhevmPaths.cacheDir)) {
        fs.mkdirSync(fhevmPaths.cacheDir);
    }
    debug(`Save precompiled fhevm core contracts addresses cache file ${jsonPath}.`);
    fs.writeFileSync(jsonPath, JSON.stringify(addresses, null, 2), "utf8");
    return addresses;
}
//# sourceMappingURL=PrecompiledFhevmCoreContracts.js.map