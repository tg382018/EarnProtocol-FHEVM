"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FhevmEnvironmentPaths = void 0;
exports.resolveFromConsumer = resolveFromConsumer;
const mock_utils_1 = require("@fhevm/mock-utils");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const resolve = __importStar(require("resolve"));
const error_1 = require("../error");
const constants_1 = __importDefault(require("./constants"));
const path_1 = require("./utils/path");
class FhevmEnvironmentPaths {
    constructor(root) {
        Object.defineProperty(this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._root = root;
        this._checkMockUtilsVersions();
    }
    get rootDir() {
        return this._root;
    }
    get nodeModulesDir() {
        return path.join(this.rootDir, "node_modules");
    }
    get cacheDir() {
        return path.join(this.rootDir, "fhevmTemp");
    }
    get cachePrecompiledFhevmCoreContractsAddressesJson() {
        return path.join(this.cacheDir, "precompiled-fhevm-core-contracts-addresses.json");
    }
    get cacheFhevmSolidityConfigDir() {
        return path.join(this.cacheDir, path.join(constants_1.default.FHEVM_SOLIDITY_PACKAGE.name, path.dirname(constants_1.default.FHEVM_SOLIDITY_PACKAGE.configFile)));
    }
    get relCacheFhevmSolidityConfigDir() {
        const abs = this.cacheFhevmSolidityConfigDir;
        return path.relative(this.rootDir, abs);
    }
    get relCacheFhevmSolidityConfigDirUnix() {
        const abs = this.cacheFhevmSolidityConfigDir;
        return (0, path_1.toUnixRelPath)(path.relative(this.rootDir, abs));
    }
    get cacheCoprocessorConfigSol() {
        return path.join(this.cacheFhevmSolidityConfigDir, path.basename(constants_1.default.FHEVM_SOLIDITY_PACKAGE.configFile));
    }
    get fhevmSolidityDir() {
        return path.dirname(this._resolveFromConsumer(path.join(constants_1.default.FHEVM_SOLIDITY_PACKAGE.name, "package.json")));
    }
    get solidityCoverageDir() {
        try {
            return path.dirname(this._resolveFromConsumer(path.join(constants_1.default.SOLIDITY_COVERAGE_PACKAGE_NAME, "package.json")));
        }
        catch {
            return undefined;
        }
    }
    get mockUtilsDir() {
        try {
            return path.dirname(this._resolveFromConsumer(path.join(constants_1.default.FHEVM_MOCK_UTILS_PACKAGE_NAME, "package.json")));
        }
        catch {
            return undefined;
        }
    }
    get fhevmSolidityConfigDir() {
        return path.join(this.fhevmSolidityDir, path.dirname(constants_1.default.FHEVM_SOLIDITY_PACKAGE.configFile));
    }
    get fhevmSolidityConfigFile() {
        return path.join(this.fhevmSolidityDir, constants_1.default.FHEVM_SOLIDITY_PACKAGE.configFile);
    }
    get fhevmSolidityLibDir() {
        return path.join(this.fhevmSolidityDir, "lib");
    }
    get zamaFheOracleSolidityDir() {
        return path.dirname(this._resolveFromConsumer(path.join(constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.name, "package.json")));
    }
    get zamaFheOracleSolidityAddressDir() {
        return path.join(this.zamaFheOracleSolidityDir, path.dirname(constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.addressFile));
    }
    get zamaFheOracleSolidityAddressSol() {
        return path.join(this.zamaFheOracleSolidityAddressDir, this.zamaOracleAddressSolFilename);
    }
    get cacheZamaFheOracleSolidityDir() {
        return path.join(this.cacheDir, constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.name);
    }
    get cacheZamaFheOracleSolidityAddressDir() {
        return path.join(this.cacheZamaFheOracleSolidityDir, path.dirname(constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.addressFile));
    }
    get cacheZamaOracleAddressSol() {
        return path.join(this.cacheZamaFheOracleSolidityDir, constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.addressFile);
    }
    get zamaOracleAddressSolFilename() {
        return path.basename(constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.addressFile);
    }
    get relCacheZamaFheOracleSolidityAddressDir() {
        const abs = this.cacheZamaFheOracleSolidityAddressDir;
        return path.relative(this.rootDir, abs);
    }
    get relCacheZamaFheOracleSolidityAddressDirUnix() {
        const abs = this.cacheZamaFheOracleSolidityAddressDir;
        return (0, path_1.toUnixRelPath)(path.relative(this.rootDir, abs));
    }
    resolveFhevmCoreContractsArtifactRootDir() {
        let modulePath = path.resolve(path.join("artifacts", constants_1.default.FHEVM_CORE_CONTRACTS_PACKAGE.name));
        if (!fs.existsSync(modulePath)) {
            modulePath = path.join(constants_1.default.FHEVM_CORE_CONTRACTS_PACKAGE.name, "artifacts");
        }
        return modulePath;
    }
    resolveZamaFheOracleSolidityArtifactRootDir() {
        let modulePath = path.resolve(path.join("artifacts", constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.name));
        if (!fs.existsSync(modulePath)) {
            modulePath = path.join(constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE.name, "artifacts");
        }
        return modulePath;
    }
    resolveFhevmCoreContractsArtifactPath(contractName) {
        const root = this.resolveFhevmCoreContractsArtifactRootDir();
        return path.join(root, `contracts/${contractName}.sol/${contractName}.json`);
    }
    resolveZamaFheOracleSolidityArtifactPath(contractName) {
        const root = this.resolveZamaFheOracleSolidityArtifactRootDir();
        return path.join(root, `contracts/${contractName}.sol/${contractName}.json`);
    }
    async getFhevmCoreContractsArtifact(contractName) {
        const modulePath = this.resolveFhevmCoreContractsArtifactPath(contractName);
        const artifact = await Promise.resolve(`${modulePath}`).then(s => __importStar(require(s)));
        return { artifact, path: modulePath };
    }
    async getZamaFheOracleSolidityArtifact(contractName) {
        const modulePath = this.resolveZamaFheOracleSolidityArtifactPath(contractName);
        const artifact = await Promise.resolve(`${modulePath}`).then(s => __importStar(require(s)));
        return { artifact, path: modulePath };
    }
    getMockUtilsVersion() {
        try {
            const dir = this.mockUtilsDir;
            if (!dir) {
                return undefined;
            }
            const pkgJson = JSON.parse(fs.readFileSync(path.join(dir, "package.json"), "utf8"));
            return pkgJson.version;
        }
        catch {
            return undefined;
        }
    }
    getBundledMockUtilsVersion() {
        return mock_utils_1.version;
    }
    _checkMockUtilsVersions() {
        const projectVersion = this.getMockUtilsVersion();
        if (!projectVersion) {
            return;
        }
        const bundledVersion = this.getBundledMockUtilsVersion();
        if (bundledVersion !== projectVersion) {
            throw new error_1.HardhatFhevmError(`Version mismatch detected for ${constants_1.default.FHEVM_MOCK_UTILS_PACKAGE_NAME}.\n` +
                `> Installed in your project: ${constants_1.default.FHEVM_MOCK_UTILS_PACKAGE_NAME}:${projectVersion}\n` +
                `> Expected (plugin): ${constants_1.default.FHEVM_MOCK_UTILS_PACKAGE_NAME}:${bundledVersion}\n\n` +
                `Please ensure that your project is using the same version of ${constants_1.default.FHEVM_MOCK_UTILS_PACKAGE_NAME}.\n` +
                `You can either:\n` +
                `- Align the versions by updating your dependencies\n` +
                `- Rely solely on the version provided by ${constants_1.default.HARDHAT_PLUGIN_NAME} (no direct install)\n\n` +
                `This mismatch may lead to subtle runtime issues due to type incompatibilities or conflicting behavior.`);
        }
    }
    _resolveFromConsumer(modulePathId) {
        return resolveFromConsumer(modulePathId, this._root);
    }
}
exports.FhevmEnvironmentPaths = FhevmEnvironmentPaths;
function resolveFromConsumer(modulePathId, basedir) {
    try {
        const resolved = resolve.sync(modulePathId, {
            basedir,
        });
        return resolved;
    }
    catch {
        throw new error_1.HardhatFhevmError(`Unable to resolve ${modulePathId} from project at ${basedir}`);
    }
}
//# sourceMappingURL=FhevmEnvironmentPaths.js.map