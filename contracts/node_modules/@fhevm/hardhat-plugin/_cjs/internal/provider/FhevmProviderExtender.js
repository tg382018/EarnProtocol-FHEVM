"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FhevmProviderExtender = void 0;
const mock_utils_1 = require("@fhevm/mock-utils");
const ethers_1 = require("ethers");
const errors_1 = require("hardhat/internal/core/providers/errors");
const plugins_1 = require("hardhat/plugins");
const picocolors = __importStar(require("picocolors"));
const error_1 = require("../../error");
const EnvironmentExtender_1 = require("../EnvironmentExtender");
const constants_1 = __importDefault(require("../constants"));
const error_2 = require("../error");
const FhevmContractError_1 = require("../errors/FhevmContractError");
class FhevmProviderExtender extends plugins_1.ProviderWrapper {
    constructor(_wrappedProvider, _config, _network, _blockNumber) {
        super(_wrappedProvider);
        Object.defineProperty(this, "_config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_networkName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._config = _config;
        this._networkName = _network;
    }
    async request(args) {
        switch (args.method) {
            case "eth_estimateGas":
                return this._handleEthEstimateGas(args);
            case "eth_sendTransaction":
                return this._handleEthSendTransaction(args);
            case "evm_revert":
                return this._handleEvmRevert(args);
            case mock_utils_1.relayer.RELAYER_METADATA:
                return this._handleFhevmRelayerMetadata(args);
            case mock_utils_1.relayer.RELAYER_V1_USER_DECRYPT:
                return this._handleFhevmRelayerV1UserDecrypt(args);
            case mock_utils_1.relayer.RELAYER_V1_PUBLIC_DECRYPT:
                return this._handleFhevmRelayerV1PublicDecrypt(args);
            case mock_utils_1.relayer.RELAYER_V1_INPUT_PROOF:
                return this._handleFhevmRelayerV1InputProof(args);
            case mock_utils_1.relayer.FHEVM_AWAIT_DECRYPTION_ORACLE:
                return this._handleFhevmAwaitDecryptionOracle(args);
            case mock_utils_1.relayer.FHEVM_CREATE_DECRYPTION_SIGNATURES:
                return this._handleFhevmCreateDecryptionSignatures(args);
            case mock_utils_1.relayer.FHEVM_GET_CLEAR_TEXT:
                return this._handleFhevmGetClearText(args);
            default:
                return this._wrappedProvider.request(args);
        }
    }
    async _handleFhevmRelayerMetadata(args) {
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (!fhevmEnv.useEmbeddedMockEngine) {
            return this._wrappedProvider.request(args);
        }
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
        }
        const metadata = {
            version: mock_utils_1.version,
            chainId: fhevmEnv.chainId,
            gatewayChainId: fhevmEnv.getGatewayChainId(),
            ACLAddress: fhevmEnv.getACLAddress(),
            CoprocessorAddress: fhevmEnv.getFHEVMExecutorAddress(),
            DecryptionOracleAddress: fhevmEnv.getDecryptionOracleAddress(),
            KMSVerifierAddress: fhevmEnv.getKMSVerifierAddress(),
            InputVerifierAddress: fhevmEnv.getInputVerifierAddress(),
            relayerSignerAddress: fhevmEnv.getRelayerSignerAddress(),
        };
        return metadata;
    }
    async _handleEthSendTransaction(args) {
        if (this._networkName === "hardhat") {
            const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
            if (fhevmEnv.isRunningInHHNode) {
                return this._wrappedProvider.request(args);
            }
        }
        try {
            return await this._wrappedProvider.request(args);
        }
        catch (e) {
            if (e instanceof errors_1.ProviderError || errors_1.ProviderError.isProviderError(e)) {
                (0, error_2.assertHHFhevm)(this._networkName !== "hardhat");
                await (0, FhevmContractError_1.mutateProviderErrorInPlace)(EnvironmentExtender_1.fhevmContext.get(), e);
            }
            else if (e instanceof Error) {
                (0, error_2.assertHHFhevm)(this._networkName === "hardhat");
                await (0, FhevmContractError_1.mutateErrorInPlace)(EnvironmentExtender_1.fhevmContext.get(), e, args);
            }
            throw e;
        }
    }
    async _handleEthEstimateGas(args) {
        try {
            const estimatedGasLimit = BigInt((await this._wrappedProvider.request(args)));
            const increasedGasLimit = ethers_1.ethers.toBeHex((estimatedGasLimit * FhevmProviderExtender.ESTIMATEGAS_PERCENTAGE) / 100n);
            return increasedGasLimit;
        }
        catch (e) {
            const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
            let tx = undefined;
            if (args.params !== undefined && Array.isArray(args.params) && args.params.length > 0) {
                const p = args.params[0];
                if (typeof p.from === "string" && typeof p.to === "string") {
                    tx = { from: p.from, to: p.to };
                }
            }
            await (0, FhevmContractError_1.mutateProviderErrorInPlace)(fhevmEnv, e, tx);
            throw e;
        }
    }
    async _handleFhevmRelayerV1PublicDecrypt(args) {
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (!fhevmEnv.useEmbeddedMockEngine) {
            return this._wrappedProvider.request(args);
        }
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
        }
        const payload = _getRequestSingleParam(args);
        mock_utils_1.relayer.assertIsRelayerV1PublicDecryptPayload(payload);
        const clearTextHexList = await fhevmEnv.coprocessor.queryHandlesBytes32AsHex(payload.ciphertextHandles);
        const { decryptedResult, signatures } = await fhevmEnv.decryptionOracle.createDecryptionSignatures(payload.ciphertextHandles, clearTextHexList, payload.extraData);
        const response = {
            decrypted_value: decryptedResult,
            signatures: signatures,
        };
        return response;
    }
    async _handleFhevmCreateDecryptionSignatures(args) {
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (!fhevmEnv.useEmbeddedMockEngine) {
            return this._wrappedProvider.request(args);
        }
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
        }
        const payload = _getRequestSingleParam(args);
        const res = await fhevmEnv.decryptionOracle.createDecryptionSignatures(payload.handlesBytes32Hex, payload.clearTextValuesHex, payload.extraData);
        return res;
    }
    async _handleFhevmAwaitDecryptionOracle(args) {
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (!fhevmEnv.useEmbeddedMockEngine) {
            return this._wrappedProvider.request(args);
        }
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
        }
        await fhevmEnv.decryptionOracle.awaitDecryptionOracle();
        return 0;
    }
    async _handleFhevmRelayerV1UserDecrypt(args) {
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (!fhevmEnv.useEmbeddedMockEngine) {
            return this._wrappedProvider.request(args);
        }
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
        }
        _assertSingleParamArray(args);
        const payload = args.params[0];
        mock_utils_1.relayer.assertIsRelayerV1UserDecryptPayload(payload);
        await mock_utils_1.MockFhevmInstance.verifyUserDecryptSignature(payload.publicKey, payload.signature, payload.contractAddresses, payload.userAddress, payload.requestValidity.startTimestamp, payload.requestValidity.durationDays, fhevmEnv.getGatewayDecryptionAddress(), Number(payload.contractsChainId));
        const handleBytes32HexList = payload.handleContractPairs.map((h) => {
            return ethers_1.ethers.toBeHex(ethers_1.ethers.toBigInt(h.handle), 32);
        });
        const clearTextHexList = await fhevmEnv.coprocessor.queryHandlesBytes32AsHex(handleBytes32HexList);
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
            for (let i = 0; i < clearTextHexList.length; ++i) {
                const msg = clearTextHexList[i] === "0x" ? "<EmptyValue>" : clearTextHexList[i];
                console.log(`  Query handle: ${handleBytes32HexList[i]}`);
                console.log(`  Clear text  : ${msg}`);
            }
        }
        const response = {
            payload: { decrypted_values: clearTextHexList },
            signature: ethers_1.ethers.ZeroHash,
        };
        return response;
    }
    async _handleFhevmGetClearText(args) {
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (!fhevmEnv.useEmbeddedMockEngine) {
            return this._wrappedProvider.request(args);
        }
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
        }
        const payload = _getRequestSingleStringArrayParam(args);
        const handleBytes32HexList = [];
        const fhevmHandles = [];
        for (let i = 0; i < payload.length; ++i) {
            const handleBytes32Hex = mock_utils_1.utils.ensurePrefix(payload[i], "0x");
            const fhevmHandle = mock_utils_1.FhevmHandle.verify(handleBytes32Hex, { chainId: fhevmEnv.chainId });
            handleBytes32HexList.push(handleBytes32Hex);
            fhevmHandles.push(fhevmHandle);
        }
        const clearTextHexList = await fhevmEnv.coprocessor.queryHandlesBytes32AsHex(handleBytes32HexList);
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
            for (let i = 0; i < clearTextHexList.length; ++i) {
                const h = fhevmHandles[i];
                const typeInfo = h.fhevmTypeInfo;
                const msg = clearTextHexList[i] === "0x"
                    ? "<EmptyValue>"
                    : `${clearTextHexList[i]} (${typeInfo.name}, ${h.computed ? "computed" : "input"})`;
                console.log("  Query handle: ${handleBytes32HexList[i]}");
                console.log(`  Clear text  : ${msg}`);
            }
        }
        return clearTextHexList;
    }
    async _handleFhevmRelayerV1InputProof(args) {
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (!fhevmEnv.useEmbeddedMockEngine) {
            return this._wrappedProvider.request(args);
        }
        if (fhevmEnv.isRunningInHHNode) {
            console.log(picocolors.greenBright(`${args.method}`));
        }
        const payload = _getRequestSingleParam(args);
        mock_utils_1.relayer.assertIsMockRelayerV1InputProofPayload(payload);
        const contractChainId = mock_utils_1.utils.toUIntNumber(payload.contractChainId, "MockRelayerV1InputProofPayload.contractChainId");
        if (fhevmEnv.getACLAddress() !== payload.mockData.aclContractAddress) {
            throw new error_1.HardhatFhevmError(`ACL address mismatch. Expecting ${fhevmEnv.getACLAddress()}, got ${payload.mockData.aclContractAddress} instead.`);
        }
        const handlesBytes32List = mock_utils_1.FhevmHandle.computeHandles(ethers_1.ethers.getBytes(payload.ciphertextWithInputVerification), payload.mockData.fhevmTypes, payload.mockData.aclContractAddress, contractChainId, constants_1.default.FHEVM_HANDLE_VERSION);
        const response = await fhevmEnv.coprocessor.computeCoprocessorSignatures(handlesBytes32List, contractChainId, payload.contractAddress, payload.userAddress, payload.extraData);
        for (let i = 0; i < response.handles.length; ++i) {
            await fhevmEnv.coprocessor.insertHandleBytes32(mock_utils_1.utils.ensurePrefix(response.handles[i], "0x"), payload.mockData.clearTextValuesBigIntHex[i], payload.mockData.metadatas[i]);
        }
        return response;
    }
    async _handleEvmRevert(args) {
        const result = await this._wrappedProvider.request(args);
        const blockNumberHex = (await this._wrappedProvider.request({ method: "eth_blockNumber" }));
        const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
        if (fhevmEnv.useEmbeddedMockEngine) {
            await fhevmEnv.coprocessor.handleEvmRevert(parseInt(blockNumberHex));
        }
        return result;
    }
}
exports.FhevmProviderExtender = FhevmProviderExtender;
Object.defineProperty(FhevmProviderExtender, "ESTIMATEGAS_PERCENTAGE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 120n
});
function _getRequestSingleParam(args) {
    (0, error_2.assertHHFhevm)(args.params !== undefined);
    (0, error_2.assertHHFhevm)(Array.isArray(args.params));
    (0, error_2.assertHHFhevm)(args.params.length === 1);
    return args.params[0];
}
function _getRequestSingleStringArrayParam(args) {
    const p = _getRequestSingleParam(args);
    (0, error_2.assertHHFhevm)(Array.isArray(p));
    for (let i = 0; i < p.length; ++i) {
        (0, error_2.assertHHFhevm)(typeof p[i] === "string");
    }
    return p;
}
function _assertSingleParamArray(args) {
    (0, error_2.assertHHFhevm)(args);
    (0, error_2.assertHHFhevm)(Array.isArray(args.params));
    (0, error_2.assertHHFhevm)(args.params.length === 1);
}
//# sourceMappingURL=FhevmProviderExtender.js.map