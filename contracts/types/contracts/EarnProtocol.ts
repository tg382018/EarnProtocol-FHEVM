/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EarnProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateEncryptedScore"
      | "calculateInterestRate"
      | "calculatePlainScore"
      | "calculateScoreWithFHE"
      | "canClaim"
      | "claimRewards"
      | "contractBalance"
      | "getEncryptedScore"
      | "getUserData"
      | "getUserScoreStatus"
      | "hasCalculatedScore"
      | "hasStaked"
      | "lastClaimTime"
      | "owner"
      | "protocolId"
      | "stake"
      | "stakeWithEncryptedScore"
      | "stakedAmount"
      | "totalEarned"
      | "totalStaked"
      | "updateContractBalance"
      | "userPlainScore"
      | "withdraw"
      | "withdrawContractBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RewardsClaimed"
      | "ScoreCalculated"
      | "Staked"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateEncryptedScore",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePlainScore",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateScoreWithFHE",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserScoreStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCalculatedScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeWithEncryptedScore",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEarned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPlainScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawContractBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateEncryptedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlainScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateScoreWithFHE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserScoreStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCalculatedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithEncryptedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPlainScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContractBalance",
    data: BytesLike
  ): Result;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreCalculatedEvent {
  export type InputTuple = [user: AddressLike, score: BigNumberish];
  export type OutputTuple = [user: string, score: bigint];
  export interface OutputObject {
    user: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    score: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, score: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EarnProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): EarnProtocol;
  waitForDeployment(): Promise<this>;

  interface: EarnProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateEncryptedScore: TypedContractMethod<
    [
      walletAge: BytesLike,
      transactionCount: BytesLike,
      ethBalance: BytesLike,
      totalGasUsed: BytesLike,
      averageTxValue: BytesLike,
      uniqueContracts: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  calculateInterestRate: TypedContractMethod<
    [score: BigNumberish],
    [bigint],
    "view"
  >;

  calculatePlainScore: TypedContractMethod<
    [
      walletAge: BigNumberish,
      transactionCount: BigNumberish,
      ethBalance: BigNumberish,
      totalGasUsed: BigNumberish,
      averageTxValue: BigNumberish,
      uniqueContracts: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  calculateScoreWithFHE: TypedContractMethod<
    [
      walletAge: BigNumberish,
      transactionCount: BigNumberish,
      ethBalance: BigNumberish,
      totalGasUsed: BigNumberish,
      averageTxValue: BigNumberish,
      uniqueContracts: BigNumberish,
      inputProof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  canClaim: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  claimRewards: TypedContractMethod<
    [userScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  contractBalance: TypedContractMethod<[], [bigint], "view">;

  getEncryptedScore: TypedContractMethod<[], [string], "view">;

  getUserData: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        _stakedAmount: bigint;
        _lastClaimTime: bigint;
        _totalEarned: bigint;
        _hasStaked: boolean;
      }
    ],
    "view"
  >;

  getUserScoreStatus: TypedContractMethod<
    [user: AddressLike],
    [[boolean, bigint] & { hasCalculated: boolean; score: bigint }],
    "view"
  >;

  hasCalculatedScore: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  hasStaked: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastClaimTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  stake: TypedContractMethod<[], [void], "payable">;

  stakeWithEncryptedScore: TypedContractMethod<
    [
      walletAge: BigNumberish,
      transactionCount: BigNumberish,
      ethBalance: BigNumberish,
      totalGasUsed: BigNumberish,
      averageTxValue: BigNumberish,
      uniqueContracts: BigNumberish,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;

  stakedAmount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalEarned: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  updateContractBalance: TypedContractMethod<[], [void], "nonpayable">;

  userPlainScore: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawContractBalance: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateEncryptedScore"
  ): TypedContractMethod<
    [
      walletAge: BytesLike,
      transactionCount: BytesLike,
      ethBalance: BytesLike,
      totalGasUsed: BytesLike,
      averageTxValue: BytesLike,
      uniqueContracts: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateInterestRate"
  ): TypedContractMethod<[score: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePlainScore"
  ): TypedContractMethod<
    [
      walletAge: BigNumberish,
      transactionCount: BigNumberish,
      ethBalance: BigNumberish,
      totalGasUsed: BigNumberish,
      averageTxValue: BigNumberish,
      uniqueContracts: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateScoreWithFHE"
  ): TypedContractMethod<
    [
      walletAge: BigNumberish,
      transactionCount: BigNumberish,
      ethBalance: BigNumberish,
      totalGasUsed: BigNumberish,
      averageTxValue: BigNumberish,
      uniqueContracts: BigNumberish,
      inputProof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canClaim"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[userScore: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEncryptedScore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUserData"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        _stakedAmount: bigint;
        _lastClaimTime: bigint;
        _totalEarned: bigint;
        _hasStaked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserScoreStatus"
  ): TypedContractMethod<
    [user: AddressLike],
    [[boolean, bigint] & { hasCalculated: boolean; score: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasCalculatedScore"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasStaked"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastClaimTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "stakeWithEncryptedScore"
  ): TypedContractMethod<
    [
      walletAge: BigNumberish,
      transactionCount: BigNumberish,
      ethBalance: BigNumberish,
      totalGasUsed: BigNumberish,
      averageTxValue: BigNumberish,
      uniqueContracts: BigNumberish,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stakedAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEarned"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateContractBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPlainScore"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawContractBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ScoreCalculated"
  ): TypedContractEvent<
    ScoreCalculatedEvent.InputTuple,
    ScoreCalculatedEvent.OutputTuple,
    ScoreCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "ScoreCalculated(address,uint256)": TypedContractEvent<
      ScoreCalculatedEvent.InputTuple,
      ScoreCalculatedEvent.OutputTuple,
      ScoreCalculatedEvent.OutputObject
    >;
    ScoreCalculated: TypedContractEvent<
      ScoreCalculatedEvent.InputTuple,
      ScoreCalculatedEvent.OutputTuple,
      ScoreCalculatedEvent.OutputObject
    >;

    "Staked(address,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
